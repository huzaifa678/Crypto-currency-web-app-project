[0m[1mdata.aws_availability_zones.available: Reading...[0m[0m
[0m[1maws_secretsmanager_secret.rds_credentials: Refreshing state... [id=arn:aws:secretsmanager:us-east-1:533267178572:secret:rds-credentials-v2-lkZXEl][0m
[0m[1maws_ecr_repository.ecr_repo: Refreshing state... [id=crypto-ecr-repo][0m
[0m[1maws_secretsmanager_secret_version.rds_credentials_version: Refreshing state... [id=arn:aws:secretsmanager:us-east-1:533267178572:secret:rds-credentials-v2-lkZXEl|terraform-20250509155457024500000002][0m
[0m[1mdata.aws_availability_zones.available: Read complete after 1s [id=us-east-1][0m
[0m[1maws_db_instance.postgres: Refreshing state... [id=db-RUK74OK6WNC5R7WH6PICFYGXLQ][0m

[1m[36mNote:[0m[1m Objects have changed outside of Terraform
[0m
Terraform detected the following changes made outside of Terraform since the
last "terraform apply" which may have affected this plan:

[1m  # aws_secretsmanager_secret.rds_credentials[0m has been deleted
[0m  [31m-[0m[0m resource "aws_secretsmanager_secret" "rds_credentials" {
      [31m-[0m[0m id                             = "arn:aws:secretsmanager:us-east-1:533267178572:secret:rds-credentials-v2-lkZXEl" [90m-> null[0m[0m
        name                           = "rds-credentials-v2"
        tags                           = {}
        [90m# (8 unchanged attributes hidden)[0m[0m
    }

[1m  # aws_secretsmanager_secret_version.rds_credentials_version[0m has been deleted
[0m  [31m-[0m[0m resource "aws_secretsmanager_secret_version" "rds_credentials_version" {
        id               = "arn:aws:secretsmanager:us-east-1:533267178572:secret:rds-credentials-v2-lkZXEl|terraform-20250509155457024500000002"
      [31m-[0m[0m secret_string    = (sensitive value) [90m-> null[0m[0m
      [31m-[0m[0m secret_string_wo = (write-only attribute) [90m-> null[0m[0m
        [90m# (5 unchanged attributes hidden)[0m[0m
    }


Unless you have made equivalent changes to your configuration, or ignored the
relevant attributes using ignore_changes, the following plan may include
actions to undo or respond to these changes.
[90m
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€[0m

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m

Terraform will perform the following actions:

[1m  # aws_db_instance.postgres[0m will be created
[0m  [32m+[0m[0m resource "aws_db_instance" "postgres" {
      [32m+[0m[0m address                               = (known after apply)
      [32m+[0m[0m allocated_storage                     = 20
      [32m+[0m[0m apply_immediately                     = false
      [32m+[0m[0m arn                                   = (known after apply)
      [32m+[0m[0m auto_minor_version_upgrade            = true
      [32m+[0m[0m availability_zone                     = (known after apply)
      [32m+[0m[0m backup_retention_period               = (known after apply)
      [32m+[0m[0m backup_target                         = (known after apply)
      [32m+[0m[0m backup_window                         = (known after apply)
      [32m+[0m[0m ca_cert_identifier                    = (known after apply)
      [32m+[0m[0m character_set_name                    = (known after apply)
      [32m+[0m[0m copy_tags_to_snapshot                 = false
      [32m+[0m[0m database_insights_mode                = (known after apply)
      [32m+[0m[0m db_name                               = "cryptodb"
      [32m+[0m[0m db_subnet_group_name                  = (known after apply)
      [32m+[0m[0m dedicated_log_volume                  = false
      [32m+[0m[0m delete_automated_backups              = true
      [32m+[0m[0m domain_fqdn                           = (known after apply)
      [32m+[0m[0m endpoint                              = (known after apply)
      [32m+[0m[0m engine                                = "postgres"
      [32m+[0m[0m engine_lifecycle_support              = (known after apply)
      [32m+[0m[0m engine_version                        = "16.3"
      [32m+[0m[0m engine_version_actual                 = (known after apply)
      [32m+[0m[0m hosted_zone_id                        = (known after apply)
      [32m+[0m[0m id                                    = (known after apply)
      [32m+[0m[0m identifier                            = "crypto-db"
      [32m+[0m[0m identifier_prefix                     = (known after apply)
      [32m+[0m[0m instance_class                        = "db.t3.micro"
      [32m+[0m[0m iops                                  = (known after apply)
      [32m+[0m[0m kms_key_id                            = (known after apply)
      [32m+[0m[0m latest_restorable_time                = (known after apply)
      [32m+[0m[0m license_model                         = (known after apply)
      [32m+[0m[0m listener_endpoint                     = (known after apply)
      [32m+[0m[0m maintenance_window                    = (known after apply)
      [32m+[0m[0m master_user_secret                    = (known after apply)
      [32m+[0m[0m master_user_secret_kms_key_id         = (known after apply)
      [32m+[0m[0m monitoring_interval                   = 0
      [32m+[0m[0m monitoring_role_arn                   = (known after apply)
      [32m+[0m[0m multi_az                              = (known after apply)
      [32m+[0m[0m nchar_character_set_name              = (known after apply)
      [32m+[0m[0m network_type                          = (known after apply)
      [32m+[0m[0m option_group_name                     = (known after apply)
      [32m+[0m[0m parameter_group_name                  = (known after apply)
      [32m+[0m[0m password                              = (sensitive value)
      [32m+[0m[0m password_wo                           = (write-only attribute)
      [32m+[0m[0m performance_insights_enabled          = false
      [32m+[0m[0m performance_insights_kms_key_id       = (known after apply)
      [32m+[0m[0m performance_insights_retention_period = (known after apply)
      [32m+[0m[0m port                                  = (known after apply)
      [32m+[0m[0m publicly_accessible                   = false
      [32m+[0m[0m replica_mode                          = (known after apply)
      [32m+[0m[0m replicas                              = (known after apply)
      [32m+[0m[0m resource_id                           = (known after apply)
      [32m+[0m[0m skip_final_snapshot                   = true
      [32m+[0m[0m snapshot_identifier                   = (known after apply)
      [32m+[0m[0m status                                = (known after apply)
      [32m+[0m[0m storage_throughput                    = (known after apply)
      [32m+[0m[0m storage_type                          = (known after apply)
      [32m+[0m[0m tags                                  = {
          [32m+[0m[0m "Name" = "cryptodb"
        }
      [32m+[0m[0m tags_all                              = {
          [32m+[0m[0m "Name" = "cryptodb"
        }
      [32m+[0m[0m timezone                              = (known after apply)
      [32m+[0m[0m username                              = (sensitive value)
      [32m+[0m[0m vpc_security_group_ids                = (known after apply)
    }

[1m  # aws_eks_cluster.eks_cluster[0m will be created
[0m  [32m+[0m[0m resource "aws_eks_cluster" "eks_cluster" {
      [32m+[0m[0m arn                           = (known after apply)
      [32m+[0m[0m bootstrap_self_managed_addons = true
      [32m+[0m[0m certificate_authority         = (known after apply)
      [32m+[0m[0m cluster_id                    = (known after apply)
      [32m+[0m[0m created_at                    = (known after apply)
      [32m+[0m[0m endpoint                      = (known after apply)
      [32m+[0m[0m id                            = (known after apply)
      [32m+[0m[0m identity                      = (known after apply)
      [32m+[0m[0m name                          = "crypto-system-eks-cluster"
      [32m+[0m[0m platform_version              = (known after apply)
      [32m+[0m[0m role_arn                      = (known after apply)
      [32m+[0m[0m status                        = (known after apply)
      [32m+[0m[0m tags                          = {
          [32m+[0m[0m "cluster" = "demo"
        }
      [32m+[0m[0m tags_all                      = {
          [32m+[0m[0m "cluster" = "demo"
        }
      [32m+[0m[0m version                       = "1.29"

      [32m+[0m[0m access_config {
          [32m+[0m[0m authentication_mode                         = "API"
          [32m+[0m[0m bootstrap_cluster_creator_admin_permissions = true
        }

      [32m+[0m[0m kubernetes_network_config (known after apply)

      [32m+[0m[0m upgrade_policy (known after apply)

      [32m+[0m[0m vpc_config {
          [32m+[0m[0m cluster_security_group_id = (known after apply)
          [32m+[0m[0m endpoint_private_access   = true
          [32m+[0m[0m endpoint_public_access    = true
          [32m+[0m[0m public_access_cidrs       = [
              [32m+[0m[0m "0.0.0.0/0",
            ]
          [32m+[0m[0m subnet_ids                = (known after apply)
          [32m+[0m[0m vpc_id                    = (known after apply)
        }
    }

[1m  # aws_eks_node_group.eks_node_group[0m will be created
[0m  [32m+[0m[0m resource "aws_eks_node_group" "eks_node_group" {
      [32m+[0m[0m ami_type               = "AL2_x86_64"
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m capacity_type          = (known after apply)
      [32m+[0m[0m cluster_name           = "crypto-system-eks-cluster"
      [32m+[0m[0m disk_size              = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m instance_types         = (known after apply)
      [32m+[0m[0m node_group_name        = "node-group"
      [32m+[0m[0m node_group_name_prefix = (known after apply)
      [32m+[0m[0m node_role_arn          = (known after apply)
      [32m+[0m[0m release_version        = (known after apply)
      [32m+[0m[0m resources              = (known after apply)
      [32m+[0m[0m status                 = (known after apply)
      [32m+[0m[0m subnet_ids             = (known after apply)
      [32m+[0m[0m tags_all               = (known after apply)
      [32m+[0m[0m version                = (known after apply)

      [32m+[0m[0m launch_template {
          [32m+[0m[0m id      = (known after apply)
          [32m+[0m[0m name    = (known after apply)
          [32m+[0m[0m version = "$Latest"
        }

      [32m+[0m[0m node_repair_config (known after apply)

      [32m+[0m[0m scaling_config {
          [32m+[0m[0m desired_size = 2
          [32m+[0m[0m max_size     = 2
          [32m+[0m[0m min_size     = 0
        }

      [32m+[0m[0m update_config (known after apply)
    }

[1m  # aws_iam_policy.custom_route53_policy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy" "custom_route53_policy" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m attachment_count = (known after apply)
      [32m+[0m[0m description      = "Allow nodes to manage Route53 records"
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m name             = "eks-node-custom-route53"
      [32m+[0m[0m name_prefix      = (known after apply)
      [32m+[0m[0m path             = "/"
      [32m+[0m[0m policy           = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "route53:ChangeResourceRecordSets",
                          [32m+[0m[0m "route53:ListHostedZones",
                          [32m+[0m[0m "route53:ListResourceRecordSets",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m policy_id        = (known after apply)
      [32m+[0m[0m tags_all         = (known after apply)
    }

[1m  # aws_iam_role.eks_cluster_role[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "eks_cluster_role" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "eks.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "eks-cluster-role"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags_all              = (known after apply)
      [32m+[0m[0m unique_id             = (known after apply)

      [32m+[0m[0m inline_policy (known after apply)
    }

[1m  # aws_iam_role.eks_node_role[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "eks_node_role" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "ec2.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "eks-node-role"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags_all              = (known after apply)
      [32m+[0m[0m unique_id             = (known after apply)

      [32m+[0m[0m inline_policy (known after apply)
    }

[1m  # aws_iam_role_policy.eks_cluster_creator_admin_policy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy" "eks_cluster_creator_admin_policy" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "eks-cluster-creator-admin-policy"
      [32m+[0m[0m name_prefix = (known after apply)
      [32m+[0m[0m policy      = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = "eks:DescribeCluster"
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = "eks:ListClusters"
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = "eks:CreateCluster"
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = "eks:UpdateClusterConfig"
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m role        = "eks-cluster-role"
    }

[1m  # aws_iam_role_policy_attachment.eks_cluster_creator_admin[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "eks_cluster_creator_admin" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AdministratorAccess"
      [32m+[0m[0m role       = "eks-cluster-role"
    }

[1m  # aws_iam_role_policy_attachment.eks_node_cni_policy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "eks_node_cni_policy" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
      [32m+[0m[0m role       = "eks-node-role"
    }

[1m  # aws_iam_role_policy_attachment.eks_node_custom_route53_policy_attachment[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "eks_node_custom_route53_policy_attachment" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = (known after apply)
      [32m+[0m[0m role       = "eks-node-role"
    }

[1m  # aws_iam_role_policy_attachment.eks_node_ecr_readonly[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "eks_node_ecr_readonly" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
      [32m+[0m[0m role       = "eks-node-role"
    }

[1m  # aws_iam_role_policy_attachment.eks_node_policy_attachment[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "eks_node_policy_attachment" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
      [32m+[0m[0m role       = "eks-node-role"
    }

[1m  # aws_launch_template.eks_nodes[0m will be created
[0m  [32m+[0m[0m resource "aws_launch_template" "eks_nodes" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m default_version        = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m instance_type          = "t3.small"
      [32m+[0m[0m latest_version         = (known after apply)
      [32m+[0m[0m name                   = (known after apply)
      [32m+[0m[0m name_prefix            = "eks-nodes-lt"
      [32m+[0m[0m tags_all               = (known after apply)
      [32m+[0m[0m vpc_security_group_ids = (known after apply)

      [32m+[0m[0m metadata_options (known after apply)

      [32m+[0m[0m tag_specifications {
          [32m+[0m[0m resource_type = "instance"
          [32m+[0m[0m tags          = {
              [32m+[0m[0m "Name" = "eks-node"
            }
        }
    }

[1m  # aws_secretsmanager_secret.rds_credentials[0m will be created
[0m  [32m+[0m[0m resource "aws_secretsmanager_secret" "rds_credentials" {
      [32m+[0m[0m arn                            = (known after apply)
      [32m+[0m[0m force_overwrite_replica_secret = false
      [32m+[0m[0m id                             = (known after apply)
      [32m+[0m[0m name                           = "rds-credentials-v2"
      [32m+[0m[0m name_prefix                    = (known after apply)
      [32m+[0m[0m policy                         = (known after apply)
      [32m+[0m[0m recovery_window_in_days        = 30
      [32m+[0m[0m tags_all                       = (known after apply)

      [32m+[0m[0m replica (known after apply)
    }

[1m  # aws_secretsmanager_secret_version.rds_credentials_version[0m will be created
[0m  [32m+[0m[0m resource "aws_secretsmanager_secret_version" "rds_credentials_version" {
      [32m+[0m[0m arn                  = (known after apply)
      [32m+[0m[0m has_secret_string_wo = (known after apply)
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m secret_id            = (known after apply)
      [32m+[0m[0m secret_string        = (sensitive value)
      [32m+[0m[0m secret_string_wo     = (write-only attribute)
      [32m+[0m[0m version_id           = (known after apply)
      [32m+[0m[0m version_stages       = (known after apply)
    }

[1m  # aws_security_group.eks_nodes[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "eks_nodes" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "Security group for EKS worker nodes"
      [32m+[0m[0m egress                 = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m from_port        = 0
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "-1"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 0
                [90m# (1 unchanged attribute hidden)[0m[0m
            },
        ]
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = (known after apply)
      [32m+[0m[0m name                   = "eks-nodes-sg"
      [32m+[0m[0m name_prefix            = (known after apply)
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Name" = "eks-nodes-sg"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Name" = "eks-nodes-sg"
        }
      [32m+[0m[0m vpc_id                 = (known after apply)
    }

[1m  # aws_security_group.rds[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "rds" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "Managed by Terraform"
      [32m+[0m[0m egress                 = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = (known after apply)
      [32m+[0m[0m name                   = "rds-postgres-sg"
      [32m+[0m[0m name_prefix            = (known after apply)
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Name" = "rds-postgres-sg"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Name" = "rds-postgres-sg"
        }
      [32m+[0m[0m vpc_id                 = (known after apply)
    }

[1m  # aws_security_group_rule.allow_eks_to_rds[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "allow_eks_to_rds" {
      [32m+[0m[0m from_port                = 5432
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 5432
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.vpc.aws_default_network_acl.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_default_network_acl" "this" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m default_network_acl_id = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Name" = "crypto-based-web-system-vpc-network"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Name" = "crypto-based-web-system-vpc-network"
        }
      [32m+[0m[0m vpc_id                 = (known after apply)

      [32m+[0m[0m egress {
          [32m+[0m[0m action          = "allow"
          [32m+[0m[0m from_port       = 0
          [32m+[0m[0m ipv6_cidr_block = "::/0"
          [32m+[0m[0m protocol        = "-1"
          [32m+[0m[0m rule_no         = 101
          [32m+[0m[0m to_port         = 0
            [90m# (1 unchanged attribute hidden)[0m[0m
        }
      [32m+[0m[0m egress {
          [32m+[0m[0m action          = "allow"
          [32m+[0m[0m cidr_block      = "0.0.0.0/0"
          [32m+[0m[0m from_port       = 0
          [32m+[0m[0m protocol        = "-1"
          [32m+[0m[0m rule_no         = 100
          [32m+[0m[0m to_port         = 0
            [90m# (1 unchanged attribute hidden)[0m[0m
        }

      [32m+[0m[0m ingress {
          [32m+[0m[0m action          = "allow"
          [32m+[0m[0m from_port       = 0
          [32m+[0m[0m ipv6_cidr_block = "::/0"
          [32m+[0m[0m protocol        = "-1"
          [32m+[0m[0m rule_no         = 101
          [32m+[0m[0m to_port         = 0
            [90m# (1 unchanged attribute hidden)[0m[0m
        }
      [32m+[0m[0m ingress {
          [32m+[0m[0m action          = "allow"
          [32m+[0m[0m cidr_block      = "0.0.0.0/0"
          [32m+[0m[0m from_port       = 0
          [32m+[0m[0m protocol        = "-1"
          [32m+[0m[0m rule_no         = 100
          [32m+[0m[0m to_port         = 0
            [90m# (1 unchanged attribute hidden)[0m[0m
        }
    }

[1m  # module.vpc.aws_default_route_table.default[0][0m will be created
[0m  [32m+[0m[0m resource "aws_default_route_table" "default" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m default_route_table_id = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m route                  = (known after apply)
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Name" = "crypto-based-web-system-vpc-network"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Name" = "crypto-based-web-system-vpc-network"
        }
      [32m+[0m[0m vpc_id                 = (known after apply)

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.vpc.aws_default_security_group.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_default_security_group" "this" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = (known after apply)
      [32m+[0m[0m egress                 = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = (known after apply)
      [32m+[0m[0m name                   = (known after apply)
      [32m+[0m[0m name_prefix            = (known after apply)
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Name" = "crypto-based-web-system-vpc-network"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Name" = "crypto-based-web-system-vpc-network"
        }
      [32m+[0m[0m vpc_id                 = (known after apply)
    }

[1m  # module.vpc.aws_eip.nat[0][0m will be created
[0m  [32m+[0m[0m resource "aws_eip" "nat" {
      [32m+[0m[0m allocation_id        = (known after apply)
      [32m+[0m[0m arn                  = (known after apply)
      [32m+[0m[0m association_id       = (known after apply)
      [32m+[0m[0m carrier_ip           = (known after apply)
      [32m+[0m[0m customer_owned_ip    = (known after apply)
      [32m+[0m[0m domain               = "vpc"
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m instance             = (known after apply)
      [32m+[0m[0m ipam_pool_id         = (known after apply)
      [32m+[0m[0m network_border_group = (known after apply)
      [32m+[0m[0m network_interface    = (known after apply)
      [32m+[0m[0m private_dns          = (known after apply)
      [32m+[0m[0m private_ip           = (known after apply)
      [32m+[0m[0m ptr_record           = (known after apply)
      [32m+[0m[0m public_dns           = (known after apply)
      [32m+[0m[0m public_ip            = (known after apply)
      [32m+[0m[0m public_ipv4_pool     = (known after apply)
      [32m+[0m[0m tags                 = {
          [32m+[0m[0m "Name" = "crypto-based-web-system-vpc-network"
        }
      [32m+[0m[0m tags_all             = {
          [32m+[0m[0m "Name" = "crypto-based-web-system-vpc-network"
        }
      [32m+[0m[0m vpc                  = (known after apply)
    }

[1m  # module.vpc.aws_internet_gateway.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_internet_gateway" "this" {
      [32m+[0m[0m arn      = (known after apply)
      [32m+[0m[0m id       = (known after apply)
      [32m+[0m[0m owner_id = (known after apply)
      [32m+[0m[0m tags     = {
          [32m+[0m[0m "Name" = "crypto-based-web-system-vpc-network"
        }
      [32m+[0m[0m tags_all = {
          [32m+[0m[0m "Name" = "crypto-based-web-system-vpc-network"
        }
      [32m+[0m[0m vpc_id   = (known after apply)
    }

[1m  # module.vpc.aws_nat_gateway.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_nat_gateway" "this" {
      [32m+[0m[0m allocation_id                      = (known after apply)
      [32m+[0m[0m association_id                     = (known after apply)
      [32m+[0m[0m connectivity_type                  = "public"
      [32m+[0m[0m id                                 = (known after apply)
      [32m+[0m[0m network_interface_id               = (known after apply)
      [32m+[0m[0m private_ip                         = (known after apply)
      [32m+[0m[0m public_ip                          = (known after apply)
      [32m+[0m[0m secondary_private_ip_address_count = (known after apply)
      [32m+[0m[0m secondary_private_ip_addresses     = (known after apply)
      [32m+[0m[0m subnet_id                          = (known after apply)
      [32m+[0m[0m tags                               = {
          [32m+[0m[0m "Name" = "crypto-based-web-system-vpc-network"
        }
      [32m+[0m[0m tags_all                           = {
          [32m+[0m[0m "Name" = "crypto-based-web-system-vpc-network"
        }
    }

[1m  # module.vpc.aws_route.private_nat_gateway[0][0m will be created
[0m  [32m+[0m[0m resource "aws_route" "private_nat_gateway" {
      [32m+[0m[0m destination_cidr_block = "0.0.0.0/0"
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m instance_id            = (known after apply)
      [32m+[0m[0m instance_owner_id      = (known after apply)
      [32m+[0m[0m nat_gateway_id         = (known after apply)
      [32m+[0m[0m network_interface_id   = (known after apply)
      [32m+[0m[0m origin                 = (known after apply)
      [32m+[0m[0m route_table_id         = (known after apply)
      [32m+[0m[0m state                  = (known after apply)

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
        }
    }

[1m  # module.vpc.aws_route.public_internet_gateway[0][0m will be created
[0m  [32m+[0m[0m resource "aws_route" "public_internet_gateway" {
      [32m+[0m[0m destination_cidr_block = "0.0.0.0/0"
      [32m+[0m[0m gateway_id             = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m instance_id            = (known after apply)
      [32m+[0m[0m instance_owner_id      = (known after apply)
      [32m+[0m[0m network_interface_id   = (known after apply)
      [32m+[0m[0m origin                 = (known after apply)
      [32m+[0m[0m route_table_id         = (known after apply)
      [32m+[0m[0m state                  = (known after apply)

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
        }
    }

[1m  # module.vpc.aws_route_table.private[0][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table" "private" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m owner_id         = (known after apply)
      [32m+[0m[0m propagating_vgws = (known after apply)
      [32m+[0m[0m route            = (known after apply)
      [32m+[0m[0m tags             = {
          [32m+[0m[0m "Name" = "crypto-based-web-system-vpc-network"
        }
      [32m+[0m[0m tags_all         = {
          [32m+[0m[0m "Name" = "crypto-based-web-system-vpc-network"
        }
      [32m+[0m[0m vpc_id           = (known after apply)
    }

[1m  # module.vpc.aws_route_table.public[0][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table" "public" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m owner_id         = (known after apply)
      [32m+[0m[0m propagating_vgws = (known after apply)
      [32m+[0m[0m route            = (known after apply)
      [32m+[0m[0m tags             = {
          [32m+[0m[0m "Name" = "crypto-based-web-system-vpc-network"
        }
      [32m+[0m[0m tags_all         = {
          [32m+[0m[0m "Name" = "crypto-based-web-system-vpc-network"
        }
      [32m+[0m[0m vpc_id           = (known after apply)
    }

[1m  # module.vpc.aws_route_table_association.private[0][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "private" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.vpc.aws_route_table_association.private[1][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "private" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.vpc.aws_route_table_association.public[0][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "public" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.vpc.aws_route_table_association.public[1][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "public" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.vpc.aws_subnet.private[0][0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "private" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "us-east-1a"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.3.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = false
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Name" = "crypto-based-web-system-vpc-network"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Name" = "crypto-based-web-system-vpc-network"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.vpc.aws_subnet.private[1][0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "private" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "us-east-1b"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.4.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = false
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Name" = "crypto-based-web-system-vpc-network"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Name" = "crypto-based-web-system-vpc-network"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.vpc.aws_subnet.public[0][0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "public" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "us-east-1a"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.1.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = false
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Name" = "crypto-based-web-system-vpc-network"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Name" = "crypto-based-web-system-vpc-network"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.vpc.aws_subnet.public[1][0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "public" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "us-east-1b"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.2.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = false
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Name" = "crypto-based-web-system-vpc-network"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Name" = "crypto-based-web-system-vpc-network"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.vpc.aws_vpc.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_vpc" "this" {
      [32m+[0m[0m arn                                  = (known after apply)
      [32m+[0m[0m cidr_block                           = "10.0.0.0/16"
      [32m+[0m[0m default_network_acl_id               = (known after apply)
      [32m+[0m[0m default_route_table_id               = (known after apply)
      [32m+[0m[0m default_security_group_id            = (known after apply)
      [32m+[0m[0m dhcp_options_id                      = (known after apply)
      [32m+[0m[0m enable_dns_hostnames                 = true
      [32m+[0m[0m enable_dns_support                   = true
      [32m+[0m[0m enable_network_address_usage_metrics = (known after apply)
      [32m+[0m[0m id                                   = (known after apply)
      [32m+[0m[0m instance_tenancy                     = "default"
      [32m+[0m[0m ipv6_association_id                  = (known after apply)
      [32m+[0m[0m ipv6_cidr_block                      = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_network_border_group = (known after apply)
      [32m+[0m[0m main_route_table_id                  = (known after apply)
      [32m+[0m[0m owner_id                             = (known after apply)
      [32m+[0m[0m tags                                 = {
          [32m+[0m[0m "Name" = "crypto-based-web-system-vpc-network"
        }
      [32m+[0m[0m tags_all                             = {
          [32m+[0m[0m "Name" = "crypto-based-web-system-vpc-network"
        }
    }

[1mPlan:[0m 37 to add, 0 to change, 0 to destroy.
[0m
Changes to Outputs:
  [33m~[0m[0m vpc_id             = "vpc-06027f0683501a2a2" -> (known after apply)
[90m
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€[0m

Saved the plan to: tfplan

To perform exactly these actions, run the following command to apply:
    terraform apply "tfplan"
