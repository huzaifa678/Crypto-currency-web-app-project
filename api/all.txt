package api

import (
	"database/sql"
	"log"
	"net/http"
	"time"

	db "github.com/huzaifa678/Crypto-currency-web-app-project/db/sqlc"
	"github.com/huzaifa678/Crypto-currency-web-app-project/utils"

	"github.com/gin-gonic/gin"
	"github.com/google/uuid"
)

type UserRole string

const (
	Admin  UserRole = "admin"
	User   UserRole = "user"
	Guest  UserRole = "guest"
)


type UserRequest struct {
	Username	 string	   `json:"username" binding:"required"`
	Email        string    `json:"email" binding:"required,email"` 
	Password 	 string    `json:"password_hash" binding:"required"`
	Role         UserRole  `json:"role" binding:"required"`
}

type UserLoginRequest struct {
	Email string 	`json:"email" binding:"required,email"`
	Password string `json:"password_hash" binding:"required"`
}

type UserLoginResponse struct {
	SessionID				string  			`json:"session_id"`
	AccessToken 			string  			`json:"access_token"`
	AccessTokenExpiration 	time.Time 			`json:"access_token_expiration"`
	RefreshToken 			string 				`json:"refresh_token"`
	RefreshTokenExpiration 	time.Time 			`json:"refresh_token_expiration"`
	User					db.GetUserByEmailRow`json:"user"`
}


func (server *server) loginUser(ctx *gin.Context) {
	var req UserLoginRequest

	if err := ctx.ShouldBindJSON(&req); err != nil {
		ctx.JSON(http.StatusBadRequest, errorResponse(err))
		log.Println("Error in binding JSON", err)
		return
	}

	user, err := server.store.GetUserByEmail(ctx, req.Email)

	if err != nil {
		ctx.JSON(http.StatusNotFound, gin.H{"error": "email not found"})
		return
	}

	log.Println("user_email args", user)

	err = utils.ComparePasswords(user.PasswordHash, req.Password)
	log.Println("Password's Hash", user.PasswordHash)
	log.Println("Password", req.Password)

	if err != nil {
		ctx.JSON(http.StatusUnauthorized, errorResponse(err))
		return
	}

	log.Println("User", user)

	if err != nil {
		if err == sql.ErrNoRows {
			log.Println("error", err)
			ctx.JSON(http.StatusNotFound, gin.H{"Email not found": "Username not found with the given email"})
			return
		}
		log.Println("Error in getting user by email", err)
		ctx.JSON(http.StatusInternalServerError, errorResponse(err))
	}

	accessToken, accessTokenPayload, err := server.tokenMaker.CreateToken(user.Username, server.config.AccessTokenDuration)
	if err != nil {
		ctx.JSON(http.StatusInternalServerError, errorResponse(err))
		return
	}

	refreshToken, refreshTokenPayload, err := server.tokenMaker.CreateToken(user.Username, server.config.RefreshTokenDuration)
	if err != nil {
		ctx.JSON(http.StatusInternalServerError, errorResponse(err))
	}

	args := db.CreateSessionParams {
		ID: refreshTokenPayload.ID,
		Username: user.Username,
		RefreshToken: refreshToken,
		UserAgent: ctx.Request.UserAgent(),
		ClientIp: ctx.ClientIP(),
		IsBlocked: false,
		ExpiresAt: refreshTokenPayload.ExpiredAt,
	}

	session, err := server.store.CreateSession(ctx, args)
	if err != nil {
		ctx.JSON(http.StatusInternalServerError, errorResponse(err))
		return
	}


	res := UserLoginResponse {
		SessionID: session.ID.String(),
		AccessToken: accessToken,
		AccessTokenExpiration: accessTokenPayload.ExpiredAt,
		RefreshToken: refreshToken,
		RefreshTokenExpiration: refreshTokenPayload.ExpiredAt,
		User: user,
	}

	ctx.JSON(http.StatusOK, res)

}


func (server *server) createUser(ctx *gin.Context) {
	var req UserRequest

	if err := ctx.ShouldBindJSON(&req); err != nil {
		ctx.JSON(http.StatusBadRequest, errorResponse(err))
		log.Println("Error in binding JSON", err)
		return
	}

	hashedPassword, err := utils.HashPassword(req.Password)

	if err != nil {
		ctx.JSON(http.StatusBadRequest, errorResponse(err))
		return
	}

	_, err = server.store.GetUserByEmail(ctx, req.Email)
	if err == nil { 
		ctx.JSON(http.StatusConflict, gin.H{"error": "User with this email already exists"})
		return
	}

	if err != sql.ErrNoRows {
		ctx.JSON(http.StatusInternalServerError, errorResponse(err))
		return
	}

	arg := db.CreateUserParams {
		Username: req.Username,
		Email: req.Email,
		PasswordHash: hashedPassword,
		Role: db.UserRole(req.Role),
		IsVerified: sql.NullBool{Bool: true, Valid: true},
	}


	user, err := server.store.CreateUser(ctx, arg)

	if err != nil {
		ctx.JSON(http.StatusInternalServerError, errorResponse(err))
		return
	}

	log.Println("User created with ID:", user.ID)
	ctx.JSON(http.StatusOK, gin.H{"id": user.ID})
}

func (server *server) getUser(ctx *gin.Context) {

	var err error

	id := ctx.Param("id")

	parsedID, err := uuid.Parse(id)

	user, err := server.store.GetUserByID(ctx, parsedID)
	if err != nil {
		if err == sql.ErrNoRows {
			ctx.JSON(http.StatusNotFound, errorResponse(err))
			return
		}
		ctx.JSON(http.StatusInternalServerError, errorResponse(err))
		return
	}

	ctx.JSON(http.StatusOK, user)
}

func (server *server) updateUser(ctx *gin.Context) {

	var req UserRequest

	if err := ctx.ShouldBindJSON(&req); err != nil {
		ctx.JSON(http.StatusBadRequest, errorResponse(err))
		return
	}

	id := ctx.Param("id")

	if id == "" {
        ctx.JSON(http.StatusBadRequest, gin.H{"error": "id is required"})
        return
    }

	parsedID, err := uuid.Parse(id)

	if err != nil {
		ctx.JSON(http.StatusBadRequest, errorResponse(err))
		return
	}

	hashedPassword, err := utils.HashPassword(req.Password)

	if err != nil {
		ctx.JSON(http.StatusBadRequest, errorResponse(err))
		return
	}

	arg := db.UpdateUserParams {
		PasswordHash: hashedPassword,
		IsVerified: sql.NullBool{Bool: true, Valid: true},
		ID: parsedID,
	}

	err = server.store.UpdateUser(ctx, arg)
	if err != nil {
		ctx.JSON(http.StatusInternalServerError, errorResponse(err))
		return
	}

	ctx.JSON(http.StatusOK, gin.H{"status": "success"})
}

func (server *server) deleteUser(ctx *gin.Context) {

	id := ctx.Param("id")

	if id == "" {
        ctx.JSON(http.StatusBadRequest, gin.H{"error": "id is required"})
        return
    }

    userID, err := uuid.Parse(id)
    if err != nil {
        ctx.JSON(http.StatusBadRequest, errorResponse(err))
        return
    }

	if userID == uuid.Nil {
		ctx.JSON(http.StatusBadRequest, gin.H{"error": "invalid UUID"})
		return
	}

    err = server.store.DeleteUser(ctx, userID)
    if err != nil {
        ctx.JSON(http.StatusInternalServerError, errorResponse(err))
        return
    }

    ctx.JSON(http.StatusOK, gin.H{"status": "success"})
}
package api

import (
	"database/sql"
	"net/http"

	db "github.com/huzaifa678/Crypto-currency-web-app-project/db/sqlc"
	token "github.com/huzaifa678/Crypto-currency-web-app-project/token"

	"github.com/gin-gonic/gin"
	"github.com/google/uuid"
)

type WalletRequest struct {
    UserEmail string         `json:"user_email" binding:"required,email"`
    Currency  string         `json:"currency"`
}

type UpdateWalletRequest struct {
	Balance       sql.NullString `json:"balance"`
	LockedBalance sql.NullString `json:"locked_balance"`
	UserEmail     string         `json:"user_email"`
	Currency      string         `json:"currency"`
}

func (server *server) createWallet(ctx *gin.Context) {
    var req WalletRequest

    if err := ctx.ShouldBindJSON(&req); err != nil {
        ctx.JSON(http.StatusBadRequest, errorResponse(err))
        return
    }

    authPayload, _ := ctx.MustGet(AuthorizationPayloadKey).(*token.Payload)

    arg := db.CreateWalletParams{
        Username:  authPayload.Username,
        UserEmail: req.UserEmail,
        Currency:  req.Currency,
        Balance:   sql.NullString{String: "0", Valid: true},
    }

    wallet, err := server.store.CreateWallet(ctx, arg)
    if err != nil {
        ctx.JSON(http.StatusInternalServerError, errorResponse(err))
        return
    }

    ctx.JSON(http.StatusOK, gin.H{"id": wallet.ID})
}

func (server *server) getWallet(ctx *gin.Context) {

    id := ctx.Param("id")


    walletID, err := uuid.Parse(id)
    if err != nil {
        ctx.JSON(http.StatusBadRequest, errorResponse(err))
        return
    }

    if walletID == uuid.Nil {
        ctx.JSON(http.StatusBadRequest, gin.H{"error": "invalid UUID"})
        return
    }


    wallet, err := server.store.GetWalletByID(ctx, walletID)
    if err != nil {
        if err == sql.ErrNoRows {
            ctx.JSON(http.StatusNotFound, errorResponse(err))
            return
        }
        ctx.JSON(http.StatusInternalServerError, errorResponse(err))
        return
    }


    authPayload := ctx.MustGet(AuthorizationPayloadKey).(*token.Payload)

    if authPayload.Username != wallet.Username {
        ctx.JSON(http.StatusUnauthorized, gin.H{"error": "unauthorized"})
        return
    }

    ctx.JSON(http.StatusOK, wallet)
}

func (server *server) updateWallet(ctx *gin.Context) {
	var req UpdateWalletRequest

    if err := ctx.ShouldBindJSON(&req); err != nil {
        ctx.JSON(http.StatusBadRequest, errorResponse(err))
        return
    }

    id := ctx.Param("id")

	if id == "" {
        ctx.JSON(http.StatusBadRequest, gin.H{"error": "id is required"})
        return
    }

	walletID, err := uuid.Parse(id)

	if err != nil {
		ctx.JSON(http.StatusBadRequest, errorResponse(err))
		return
	}

    wallet, err := server.store.GetWalletByID(ctx, walletID)

    if err != nil {
        if err == sql.ErrNoRows {
            ctx.JSON(http.StatusNotFound, errorResponse(err))
            return
        }
        ctx.JSON(http.StatusInternalServerError, errorResponse(err))
        return
    }
    authPayload := ctx.MustGet(AuthorizationPayloadKey).(*token.Payload)

    if authPayload.Username != wallet.Username {
        ctx.JSON(http.StatusUnauthorized, gin.H{"error": "unauthorized"})
        return
    }

	arg := db.UpdateWalletBalanceParams{
		Balance:       req.Balance,
		LockedBalance: req.LockedBalance,
	}

    err = server.store.UpdateWalletBalance(ctx, arg)
    if err != nil {
        ctx.JSON(http.StatusInternalServerError, errorResponse(err))
        return
    }

    ctx.JSON(http.StatusOK, gin.H{"status": "success"})
}

func (server *server) deleteWallet(ctx *gin.Context) {
    id := ctx.Param("id")
    walletID, err := uuid.Parse(id)
    if err != nil {
        ctx.JSON(http.StatusBadRequest, errorResponse(err))
        return
    }

    if walletID == uuid.Nil {
        ctx.JSON(http.StatusBadRequest, gin.H{"error": "invalid UUID"})
        return
    }

    wallet, err := server.store.GetWalletByID(ctx, walletID)

    if err != nil {
        if err == sql.ErrNoRows {
            ctx.JSON(http.StatusNotFound, errorResponse(err))
            return
        }
        ctx.JSON(http.StatusInternalServerError, errorResponse(err))
        return
    }

    authPayload := ctx.MustGet(AuthorizationPayloadKey).(*token.Payload)

    if authPayload.Username != wallet.Username {
        ctx.JSON(http.StatusUnauthorized, gin.H{"error": "unauthorized"})
        return
    }

    err = server.store.DeleteWallet(ctx, walletID)

    if err != nil {
        ctx.JSON(http.StatusInternalServerError, errorResponse(err))
        return
    }

    ctx.JSON(http.StatusOK, gin.H{"status": "success"})
}package api

import (
	"database/sql"
	"fmt"
	"log"
	"net/http"

	db "github.com/huzaifa678/Crypto-currency-web-app-project/db/sqlc"
	token "github.com/huzaifa678/Crypto-currency-web-app-project/token"

	"github.com/gin-gonic/gin"
	"github.com/google/uuid"
)


type TransactionRequest struct {
	UserEmail string         `json:"user_email"`
	Type      db.TransactionType `json:"type"`
	Currency  string          `json:"currency"`
	Amount    string          `json:"amount"`
	Address   string  `json:"address"`
	TxHash    string  `json:"tx_hash"`
}

func (server *server) createTransaction(ctx *gin.Context) {
	var req TransactionRequest

	if err := ctx.ShouldBindJSON(&req); err != nil {
        log.Printf("JSON Binding Error: %v", err)
		ctx.JSON(http.StatusBadRequest, errorResponse(err))
		return
	}

    currencies := []string{"USD", "EUR", "BTC", "ETH", "JPY"}

    if !isValidCurrency(req.Currency, currencies) {
        ctx.JSON(http.StatusBadRequest, gin.H{"error": "invalid currency"})
        return
    }

    authPayload := ctx.MustGet(AuthorizationPayloadKey).(*token.Payload)

	arg := db.CreateTransactionParams{
        Username: authPayload.Username,
		UserEmail: req.UserEmail,
		Type: db.TransactionType(req.Type),
		Currency: req.Currency,
		Amount: req.Amount,
		Address: sql.NullString{String: req.Address, Valid: req.Address != ""},
		TxHash: sql.NullString{String: req.TxHash, Valid: req.TxHash != ""},
	}

	transaction, err := server.store.CreateTransaction(ctx, arg)

	if err != nil {
		ctx.JSON(http.StatusInternalServerError, errorResponse(err))
		return
	}

	ctx.JSON(http.StatusOK, gin.H{"id": transaction.ID})
}

func (server *server) getTransaction(ctx *gin.Context) {
    id := ctx.Param("id")
    transactionID, err := uuid.Parse(id)
    if err != nil {
        ctx.JSON(http.StatusBadRequest, errorResponse(err))
        return
    }

    if transactionID == uuid.Nil {
        ctx.JSON(http.StatusBadRequest, gin.H{"error":  "invalid UUID"})
        return
    }

    transaction, err := server.store.GetTransactionByID(ctx, transactionID)
    if err != nil {
        if err == sql.ErrNoRows {
            ctx.JSON(http.StatusNotFound, errorResponse(err))
            return
        }
        ctx.JSON(http.StatusInternalServerError, errorResponse(err))
        return
    }

    authPayload := ctx.MustGet(AuthorizationPayloadKey).(*token.Payload)

    if authPayload.Username != transaction.Username {
        ctx.JSON(http.StatusUnauthorized, gin.H{"error": "not authorized"})
        return
    }

    ctx.JSON(http.StatusOK, transaction)
}

func (server *server) listUserTransactions(ctx *gin.Context) {
    email := ctx.Param("user_email")
    fmt.Printf("Extracted Email: '%s'\n", email)

    transactions, err := server.store.GetTransactionsByUserEmail(ctx, email)
    if err != nil {
        ctx.JSON(http.StatusInternalServerError, errorResponse(err))
        return
    }

    ctx.JSON(http.StatusOK, transactions)
}

func (server *server) deleteTransaction(ctx *gin.Context) {
    id := ctx.Param("id")
    transactionID, err := uuid.Parse(id)

    if err != nil {
        ctx.JSON(http.StatusBadRequest, errorResponse(err))
        return
    }

    if transactionID == uuid.Nil {
        ctx.JSON(http.StatusBadRequest, gin.H{"error":  "invalid UUID"})
        return
    }

    transaction, err := server.store.GetTransactionByID(ctx, transactionID)
    if err != nil {
        if err == sql.ErrNoRows {
            ctx.JSON(http.StatusNotFound, errorResponse(err))
            return
        }
        ctx.JSON(http.StatusInternalServerError, errorResponse(err))
        return
    }

    authPayload := ctx.MustGet(AuthorizationPayloadKey).(*token.Payload)

    if authPayload.Username != transaction.Username {
        ctx.JSON(http.StatusUnauthorized, gin.H{"error": "not authorized"})
        return
    }

    err = server.store.DeleteTransaction(ctx, transactionID)
    if err != nil {
		ctx.JSON(http.StatusInternalServerError, errorResponse(err))
		return
	}

    ctx.JSON(http.StatusOK, gin.H{"status": "success"})
}package api

import (
	"database/sql"
	"log"
	"net/http"
	"strconv"

	db "github.com/huzaifa678/Crypto-currency-web-app-project/db/sqlc"
	token "github.com/huzaifa678/Crypto-currency-web-app-project/token"

	"github.com/gin-gonic/gin"
	"github.com/google/uuid"
)


type RequestTradeParams struct {
	BuyOrderID  uuid.UUID 	   `json:"buy_order_id" binding:"required"`
	SellOrderID uuid.UUID	   `json:"sell_order_id" binding:"required"`
	MarketID    uuid.UUID 	   `json:"market_id" binding:"required"`
	Price       string         `json:"price" binding:"required"`
	Amount      string         `json:"amount" binding:"required"`
	Fee         string 		   `json:"fee" binding:"required"`
}


func (server *server) createTrade(ctx *gin.Context) {
	var req RequestTradeParams

	if err := ctx.ShouldBindJSON(&req); err != nil {
		ctx.JSON(http.StatusBadRequest, errorResponse(err))
		return
	}

	if !isValidFee(req.Fee) {
		ctx.JSON(http.StatusBadRequest, gin.H{"error": "invalid fee"})
		return
	}

	authPayload := ctx.MustGet(AuthorizationPayloadKey).(*token.Payload)

	arg := db.CreateTradeParams{
		Username:  authPayload.Username,
		BuyOrderID:  req.BuyOrderID,
		SellOrderID: req.SellOrderID,
		MarketID:    req.MarketID,
		Price:     req.Price,
		Amount:    req.Amount,
		Fee:       sql.NullString{String: req.Fee, Valid: req.Fee != ""},
	}


	trade, err := server.store.CreateTrade(ctx, arg)
	if err != nil {
		log.Println("ERROR:", err)
		ctx.JSON(http.StatusInternalServerError, errorResponse(err))
		return
	}

	ctx.JSON(http.StatusOK, gin.H{"id": trade.ID})
}

func (server *server) getTrade(ctx *gin.Context) {
	id := ctx.Param("id")
	tradeID, err := uuid.Parse(id)

	if err != nil {
		ctx.JSON(http.StatusBadRequest, errorResponse(err))
		return
	}

	if tradeID == uuid.Nil {
		ctx.JSON(http.StatusBadRequest, gin.H{"error": "invalid ID"})
		return
	}

	trade, err := server.store.GetTradeByID(ctx, tradeID)
	if err != nil {
		if err == sql.ErrNoRows {
			ctx.JSON(http.StatusNotFound, errorResponse(err))
			return
		}
		ctx.JSON(http.StatusInternalServerError, errorResponse(err))
		return
	}

	ctx.JSON(http.StatusOK, trade)
}

func (server *server) deleteTrade(ctx *gin.Context) {
	id := ctx.Param("id")
	tradeID, err := uuid.Parse(id)

	if err != nil {
		ctx.JSON(http.StatusBadRequest, errorResponse(err))
		return
	}

	if tradeID == uuid.Nil {
		ctx.JSON(http.StatusBadRequest, gin.H{"error": "Invalid ID"})
		return
	}

	trade, err := server.store.GetTradeByID(ctx, tradeID)
	if err != nil {
		if err == sql.ErrNoRows {
			ctx.JSON(http.StatusNotFound, errorResponse(err))
			return
		}
		ctx.JSON(http.StatusInternalServerError, errorResponse(err))
		return
	}

	authPayload := ctx.MustGet(AuthorizationPayloadKey).(*token.Payload)

	if authPayload.Username != trade.Username {
		ctx.JSON(http.StatusUnauthorized, gin.H{"error": "not authorized"})
		return
	}

	err = server.store.DeleteTrade(ctx, tradeID)
	if err != nil {
		ctx.JSON(http.StatusInternalServerError, errorResponse(err))
		return
	}

	ctx.JSON(http.StatusOK, gin.H{"status": "ok"})
}


func (server *server) listTrades(ctx *gin.Context) {
    id := ctx.Param("market_id")
	marketID, err := uuid.Parse(id)

    trades, err := server.store.GetTradesByMarketID(ctx, marketID)

    if err != nil {
        ctx.JSON(http.StatusInternalServerError, errorResponse(err))
        return
    }

    ctx.JSON(http.StatusOK, trades)
}


func isValidFee(fee string) bool {
	_, err := strconv.ParseFloat(fee, 64)
	return err == nil
}

package api

import (
	"database/sql"
	"log"
	"net/http"

	db "github.com/huzaifa678/Crypto-currency-web-app-project/db/sqlc"
	token "github.com/huzaifa678/Crypto-currency-web-app-project/token"

	"github.com/gin-gonic/gin"
	"github.com/google/uuid"
)

type OrderRequest struct {
    UserEmail string          `json:"user_email"`
    MarketID  uuid.UUID       `json:"market_id"`
    Type      db.OrderType    `json:"type"`
    Status    db.OrderStatus  `json:"status"`
    Price     string          `json:"price"`
    Amount    string          `json:"amount"`
}

func (server *server) createOrder(ctx *gin.Context) {
    var req OrderRequest

    if err := ctx.ShouldBindJSON(&req); err != nil {
        log.Println("JSON Binding Error:", err)
        ctx.JSON(http.StatusBadRequest, errorResponse(err))
        return
    }

    authPayload := ctx.MustGet(AuthorizationPayloadKey).(*token.Payload)

    arg := db.CreateOrderParams{
        Username:  authPayload.Username,
        UserEmail: req.UserEmail,
        MarketID:  req.MarketID,
        Type:      req.Type,
        Status:    req.Status,
        Price:     sql.NullString{String: req.Price, Valid: req.Price != ""},
        Amount:    req.Amount,
    }

    order, err := server.store.CreateOrder(ctx, arg)
    if err != nil {
        ctx.JSON(http.StatusInternalServerError, errorResponse(err))
        return
    }

    ctx.JSON(http.StatusOK, gin.H{"id": order.ID})
}

func (server *server) getOrder(ctx *gin.Context) {
    id := ctx.Param("id")
    orderID, err := uuid.Parse(id)

    if err != nil {
        ctx.JSON(http.StatusBadRequest, errorResponse(err))
        return
    }

    if orderID == uuid.Nil {
        ctx.JSON(http.StatusBadRequest, gin.H{"error": "invalid UUID"})
        return
    }

    order, err := server.store.GetOrderByID(ctx, orderID)
    if err != nil {
        if err == sql.ErrNoRows {
            ctx.JSON(http.StatusNotFound, errorResponse(err))
            return
        }
        ctx.JSON(http.StatusInternalServerError, errorResponse(err))
        return
    }

    authPayload := ctx.MustGet(AuthorizationPayloadKey).(*token.Payload)

    if authPayload.Username != order.Username {
        ctx.JSON(http.StatusUnauthorized, gin.H{"error": "not authorized"})
        return
    }

    ctx.JSON(http.StatusOK, order)
}

func (server *server) deleteOrder(ctx *gin.Context) {
    id := ctx.Param("id")
    orderID, err := uuid.Parse(id)

    if err != nil {
        ctx.JSON(http.StatusBadRequest, errorResponse(err))
        return
    }

    if orderID == uuid.Nil {
        ctx.JSON(http.StatusBadRequest, gin.H{"error": "invalid UUID"})
        return
    }

    order, err := server.store.GetOrderByID(ctx, orderID)

    if err != nil {
        if err == sql.ErrNoRows {
            ctx.JSON(http.StatusNotFound, errorResponse(err))
            return
        }
        ctx.JSON(http.StatusInternalServerError, errorResponse(err))
        return
    }

    authPayload := ctx.MustGet(AuthorizationPayloadKey).(*token.Payload)

    if authPayload.Username != order.Username {
        ctx.JSON(http.StatusUnauthorized, gin.H{"error": "not authorized"})
        return
    }

    err = server.store.DeleteOrder(ctx, orderID)
    if err != nil {
		ctx.JSON(http.StatusInternalServerError, errorResponse(err))
		return
	}

    ctx.JSON(http.StatusOK, gin.H{"status": "success"})
}package api

import (
	"database/sql"
	"net/http"

	db "github.com/huzaifa678/Crypto-currency-web-app-project/db/sqlc"
	token "github.com/huzaifa678/Crypto-currency-web-app-project/token"

	"github.com/gin-gonic/gin"
	"github.com/google/uuid"
)

type MarketRequest struct {
    BaseCurrency   string `json:"base_currency"`
    QuoteCurrency  string `json:"quote_currency"`
    MinOrderAmount sql.NullString `json:"min_order_amount"`
    PricePrecision sql.NullInt32 `json:"price_precision"`
}

func (server *server) createMarket(ctx *gin.Context) {
    var req MarketRequest

    var err error

    if err := ctx.ShouldBindJSON(&req); err != nil {
        ctx.JSON(http.StatusBadRequest, errorResponse(err))
        return
    }

    authPayload := ctx.MustGet(AuthorizationPayloadKey).(*token.Payload)

    arg := db.CreateMarketParams{
        Username: authPayload.Username,
        BaseCurrency:  req.BaseCurrency,
        QuoteCurrency: req.QuoteCurrency,
        MinOrderAmount: req.MinOrderAmount,
        PricePrecision: req.PricePrecision,
    }

    if req.BaseCurrency == "" || req.QuoteCurrency == "" {
        ctx.JSON(http.StatusBadRequest, gin.H{"error": "no currency added"})
        return 
    }

    currencies := []string{"USD", "EUR", "BTC", "ETH", "JPY"}

    if !isValidCurrency(req.BaseCurrency, currencies) || !isValidCurrency(req.QuoteCurrency, currencies) {
        ctx.JSON(http.StatusBadRequest, gin.H{"error": "invalid currency"})
        return
    }

    market, err := server.store.CreateMarket(ctx, arg)
    if err != nil {
        ctx.JSON(http.StatusInternalServerError, errorResponse(err))
        return
    }

    ctx.JSON(http.StatusOK, gin.H{"id": market.ID})
}

func (server *server) getMarket(ctx *gin.Context) {
    id := ctx.Param("id")
    marketID, err := uuid.Parse(id)
    if err != nil {
        ctx.JSON(http.StatusBadRequest, errorResponse(err))
        return
    }

    market, err := server.store.GetMarketByID(ctx, marketID)
    if err != nil {
        if err == sql.ErrNoRows {
            ctx.JSON(http.StatusNotFound, errorResponse(err))
            return
        }
        ctx.JSON(http.StatusInternalServerError, errorResponse(err))
        return
    }

    authPayload := ctx.MustGet(AuthorizationPayloadKey).(*token.Payload)

    if authPayload.Username != market.Username {
        ctx.JSON(http.StatusUnauthorized, gin.H{"error": "not authorized"})
        return
    }

    ctx.JSON(http.StatusOK, market)
}

func (server *server) deleteMarket(ctx *gin.Context) {
    id := ctx.Param("id")
    marketID, err := uuid.Parse(id)

    if err != nil {
        ctx.JSON(http.StatusBadRequest, errorResponse(err))
        return
    }

    if id == uuid.Nil.String() {
        ctx.JSON(http.StatusBadRequest, gin.H{"error": "invalid UUID"})
        return
    }

    market, err := server.store.GetMarketByID(ctx, marketID)

    if err != nil {
        if err == sql.ErrNoRows {
            ctx.JSON(http.StatusNotFound, errorResponse(err))
            return
        }
        ctx.JSON(http.StatusInternalServerError, errorResponse(err))
    }

    authPayload := ctx.MustGet(AuthorizationPayloadKey).(*token.Payload)

    if authPayload.Username != market.Username {
        ctx.JSON(http.StatusUnauthorized, gin.H{"error": "not authorized"})
        return
    }

    err = server.store.DeleteMarket(ctx, marketID)
    if err != nil {
        ctx.JSON(http.StatusInternalServerError, errorResponse(err))
        return
    }

    ctx.JSON(http.StatusOK, gin.H{"status": "deleted"})
}

func (server *server) listMarkets(ctx *gin.Context) {
    markets, err := server.store.ListMarkets(ctx)
    if err != nil {
        ctx.JSON(http.StatusInternalServerError, errorResponse(err))
        return
    }

    ctx.JSON(http.StatusOK, markets)
}

func isValidCurrency(currency string, currencies []string) bool {
    for _, c := range currencies {
        if currency == c {
            return true
        }
    }
    return false
}
package api

import (
	"database/sql"
	"net/http"

	db "github.com/huzaifa678/Crypto-currency-web-app-project/db/sqlc"
	token "github.com/huzaifa678/Crypto-currency-web-app-project/token"

	"github.com/gin-gonic/gin"
	"github.com/google/uuid"
)

type FeeRequest struct {
    MarketID uuid.UUID `json:"market_id"`
    MakerFee string `json:"maker_fee"`
    TakerFee string `json:"taker_fee"`
}

func (server *server) createFee(ctx *gin.Context) {
    var req FeeRequest

    if err := ctx.ShouldBindJSON(&req); err != nil {
        ctx.JSON(http.StatusBadRequest, errorResponse(err))
        return
    }


    authPayload := ctx.MustGet(AuthorizationPayloadKey).(*token.Payload)

    arg := db.CreateFeeParams{
        Username: authPayload.Username,
        MarketID: req.MarketID,
        MakerFee: sql.NullString{String: req.MakerFee, Valid: req.MakerFee != ""},
        TakerFee: sql.NullString{String: req.TakerFee, Valid: req.TakerFee != ""},
    }

    fee, err := server.store.CreateFee(ctx, arg)
    if err != nil {
        ctx.JSON(http.StatusInternalServerError, errorResponse(err))
        return
    }

    ctx.JSON(http.StatusOK, gin.H{"market_id": fee.MarketID})
}

func (server *server) getFee(ctx *gin.Context) {
    id := ctx.Param("market_id")
    feeID, err := uuid.Parse(id)


    if err != nil {
        ctx.JSON(http.StatusBadRequest, errorResponse(err))
        return
    }

    if feeID == uuid.Nil {
        ctx.JSON(http.StatusBadRequest, gin.H{"error": "Invalid ID"})
    }

    fee, err := server.store.GetFeeByMarketID(ctx, feeID)
    if err != nil {
        if err == sql.ErrNoRows {
            ctx.JSON(http.StatusNotFound, errorResponse(err))
            return
        }
        ctx.JSON(http.StatusInternalServerError, errorResponse(err))
        return
    }

    ctx.JSON(http.StatusOK, fee)
}

func (server *server) deleteFee(ctx *gin.Context) {
    id := ctx.Param("id")
    feeID, err := uuid.Parse(id)

    if err != nil {
        ctx.JSON(http.StatusBadRequest, errorResponse(err))
        return
    }

    if feeID == uuid.Nil {
        ctx.JSON(http.StatusBadRequest, gin.H{"error": "Invalid ID"})
        return
    }

    fee, err := server.store.GetFeeByMarketID(ctx, feeID)

    if err != nil {
        if err == sql.ErrNoRows {
            ctx.JSON(http.StatusNotFound, errorResponse(err))
            return
        }
        ctx.JSON(http.StatusInternalServerError, errorResponse(err))
        return
    }

    authPayload := ctx.MustGet(AuthorizationPayloadKey).(*token.Payload)

    if authPayload.Username != fee.Username {
        ctx.JSON(http.StatusUnauthorized, gin.H{"error": "not authorized"})
        return
    }

    err = server.store.DeleteFee(ctx, feeID)
    if err != nil {
        ctx.JSON(http.StatusInternalServerError, errorResponse(err))
        return
    }

    ctx.JSON(http.StatusOK, gin.H{"status": "success"})
}package api

import (
	"database/sql"
	"fmt"
	"log"
	"net/http"

	"github.com/google/uuid"
	db "github.com/huzaifa678/Crypto-currency-web-app-project/db/sqlc"
	token "github.com/huzaifa678/Crypto-currency-web-app-project/token"

	"github.com/gin-gonic/gin"
)

type AuditLogRequest struct {
    UserEmail string `json:"user_email"`
    Action    string `json:"action"`
    IPAddress string `json:"ip_address"`
}

func (server *server) createAuditLog(ctx *gin.Context) {
    var req AuditLogRequest

    if err := ctx.ShouldBindJSON(&req); err != nil {
        ctx.JSON(http.StatusBadRequest, errorResponse(err))
        return
    }

    authPayload := ctx.MustGet(AuthorizationPayloadKey).(*token.Payload)

    arg := db.CreateAuditLogParams{
        Username: authPayload.Username,
        UserEmail: req.UserEmail,
        Action:    req.Action,
        IpAddress: sql.NullString{String: req.IPAddress, Valid: req.IPAddress != ""},
    }

    auditLog, err := server.store.CreateAuditLog(ctx, arg)
    if err != nil {
        ctx.JSON(http.StatusInternalServerError, errorResponse(err))
        return
    }

    ctx.JSON(http.StatusOK, gin.H{"user_email": auditLog.UserEmail})
}

func (server *server) getAuditLog(ctx *gin.Context) {
    email := ctx.Param("user_email")

    auditLog, err := server.store.GetAuditLogsByUserEmail(ctx, email)
    if err != nil {
        if err == sql.ErrNoRows {
            ctx.JSON(http.StatusNotFound, errorResponse(err))
            return
        }
        ctx.JSON(http.StatusInternalServerError, errorResponse(err))
        return
    }

    authPayload := ctx.MustGet(AuthorizationPayloadKey).(*token.Payload)

    if authPayload.Username != auditLog[1].Username {
        ctx.JSON(http.StatusUnauthorized, gin.H{"error": "Not authorized"})
        return
    }

    ctx.JSON(http.StatusOK, auditLog)
}

func (server *server) DeleteAuditLog(ctx *gin.Context) {
    id := ctx.Param("id")
    user_email := ctx.Query("user_email")

    log.Printf("Extracted user_email: %s", user_email)


    if user_email == "" {
        ctx.JSON(http.StatusBadRequest, errorResponse(fmt.Errorf("user_email is required")))
        return
    }

    auditLogs, err := server.store.GetAuditLogsByUserEmail(ctx, user_email)
    if err != nil {
        if err == sql.ErrNoRows {
            ctx.JSON(http.StatusNotFound, errorResponse(err))
            return
        }
        ctx.JSON(http.StatusInternalServerError, errorResponse(err))
        return
    }

    auditLogId, err := uuid.Parse(id)
    if err != nil || auditLogId == uuid.Nil {
        ctx.JSON(http.StatusBadRequest, gin.H{"error": "Invalid ID"})
        return
    }

    if len(auditLogs) == 0 {
        ctx.JSON(http.StatusNotFound, errorResponse(fmt.Errorf("no audit logs found for the given user email")))
        return
    }

    authPayload := ctx.MustGet(AuthorizationPayloadKey).(*token.Payload)

    if authPayload.Username != auditLogs[0].Username {
        ctx.JSON(http.StatusUnauthorized, gin.H{"error": "Not authorized"})
        return
    }

    err = server.store.DeleteAuditLog(ctx, auditLogId)
    if err != nil {
        ctx.JSON(http.StatusInternalServerError, errorResponse(err))
        return
    }

    ctx.JSON(http.StatusOK, nil)
}

func (server *server) listUserAuditLogs(ctx *gin.Context) {
    email := ctx.Param("user_email")

    auditLogs, err := server.store.GetAuditLogsByUserEmail(ctx, email)
    if err != nil {
        ctx.JSON(http.StatusInternalServerError, errorResponse(err))
        return
    }

    ctx.JSON(http.StatusOK, auditLogs)
}