// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/huzaifa678/Crypto-currency-web-app-project/db/sqlc (interfaces: Store_interface)

// Package mock_sqlc is a generated GoMock package.
package mock_sqlc

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	db "github.com/huzaifa678/Crypto-currency-web-app-project/db/sqlc"
)

// MockStore_interface is a mock of Store_interface interface.
type MockStore_interface struct {
	ctrl     *gomock.Controller
	recorder *MockStore_interfaceMockRecorder
}

// MockStore_interfaceMockRecorder is the mock recorder for MockStore_interface.
type MockStore_interfaceMockRecorder struct {
	mock *MockStore_interface
}

// NewMockStore_interface creates a new mock instance.
func NewMockStore_interface(ctrl *gomock.Controller) *MockStore_interface {
	mock := &MockStore_interface{ctrl: ctrl}
	mock.recorder = &MockStore_interfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore_interface) EXPECT() *MockStore_interfaceMockRecorder {
	return m.recorder
}

// CreateAuditLog mocks base method.
func (m *MockStore_interface) CreateAuditLog(arg0 context.Context, arg1 db.CreateAuditLogParams) (db.AuditLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAuditLog", arg0, arg1)
	ret0, _ := ret[0].(db.AuditLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAuditLog indicates an expected call of CreateAuditLog.
func (mr *MockStore_interfaceMockRecorder) CreateAuditLog(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAuditLog", reflect.TypeOf((*MockStore_interface)(nil).CreateAuditLog), arg0, arg1)
}

// CreateFee mocks base method.
func (m *MockStore_interface) CreateFee(arg0 context.Context, arg1 db.CreateFeeParams) (db.CreateFeeRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFee", arg0, arg1)
	ret0, _ := ret[0].(db.CreateFeeRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFee indicates an expected call of CreateFee.
func (mr *MockStore_interfaceMockRecorder) CreateFee(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFee", reflect.TypeOf((*MockStore_interface)(nil).CreateFee), arg0, arg1)
}

// CreateGoogleUser mocks base method.
func (m *MockStore_interface) CreateGoogleUser(arg0 context.Context, arg1 db.CreateGoogleUserParams) (db.GoogleAuth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGoogleUser", arg0, arg1)
	ret0, _ := ret[0].(db.GoogleAuth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGoogleUser indicates an expected call of CreateGoogleUser.
func (mr *MockStore_interfaceMockRecorder) CreateGoogleUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGoogleUser", reflect.TypeOf((*MockStore_interface)(nil).CreateGoogleUser), arg0, arg1)
}

// CreateMarket mocks base method.
func (m *MockStore_interface) CreateMarket(arg0 context.Context, arg1 db.CreateMarketParams) (db.CreateMarketRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMarket", arg0, arg1)
	ret0, _ := ret[0].(db.CreateMarketRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMarket indicates an expected call of CreateMarket.
func (mr *MockStore_interfaceMockRecorder) CreateMarket(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMarket", reflect.TypeOf((*MockStore_interface)(nil).CreateMarket), arg0, arg1)
}

// CreateOrder mocks base method.
func (m *MockStore_interface) CreateOrder(arg0 context.Context, arg1 db.CreateOrderParams) (db.CreateOrderRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", arg0, arg1)
	ret0, _ := ret[0].(db.CreateOrderRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockStore_interfaceMockRecorder) CreateOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockStore_interface)(nil).CreateOrder), arg0, arg1)
}

// CreateSession mocks base method.
func (m *MockStore_interface) CreateSession(arg0 context.Context, arg1 db.CreateSessionParams) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", arg0, arg1)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockStore_interfaceMockRecorder) CreateSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockStore_interface)(nil).CreateSession), arg0, arg1)
}

// CreateTrade mocks base method.
func (m *MockStore_interface) CreateTrade(arg0 context.Context, arg1 db.CreateTradeParams) (db.Trade, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTrade", arg0, arg1)
	ret0, _ := ret[0].(db.Trade)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTrade indicates an expected call of CreateTrade.
func (mr *MockStore_interfaceMockRecorder) CreateTrade(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTrade", reflect.TypeOf((*MockStore_interface)(nil).CreateTrade), arg0, arg1)
}

// CreateTransaction mocks base method.
func (m *MockStore_interface) CreateTransaction(arg0 context.Context, arg1 db.CreateTransactionParams) (db.CreateTransactionRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", arg0, arg1)
	ret0, _ := ret[0].(db.CreateTransactionRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockStore_interfaceMockRecorder) CreateTransaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockStore_interface)(nil).CreateTransaction), arg0, arg1)
}

// CreateTransactionTx mocks base method.
func (m *MockStore_interface) CreateTransactionTx(arg0 context.Context, arg1 db.TransactionsParams, arg2 db.FeeParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransactionTx", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTransactionTx indicates an expected call of CreateTransactionTx.
func (mr *MockStore_interfaceMockRecorder) CreateTransactionTx(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransactionTx", reflect.TypeOf((*MockStore_interface)(nil).CreateTransactionTx), arg0, arg1, arg2)
}

// CreateUser mocks base method.
func (m *MockStore_interface) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.CreateUserRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.CreateUserRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStore_interfaceMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore_interface)(nil).CreateUser), arg0, arg1)
}

// CreateUserTx mocks base method.
func (m *MockStore_interface) CreateUserTx(arg0 context.Context, arg1 db.CreateUserTxParams) (db.CreateUserTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserTx", arg0, arg1)
	ret0, _ := ret[0].(db.CreateUserTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserTx indicates an expected call of CreateUserTx.
func (mr *MockStore_interfaceMockRecorder) CreateUserTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserTx", reflect.TypeOf((*MockStore_interface)(nil).CreateUserTx), arg0, arg1)
}

// CreateVerifyEmail mocks base method.
func (m *MockStore_interface) CreateVerifyEmail(arg0 context.Context, arg1 db.CreateVerifyEmailParams) (db.VerifyEmail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVerifyEmail", arg0, arg1)
	ret0, _ := ret[0].(db.VerifyEmail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVerifyEmail indicates an expected call of CreateVerifyEmail.
func (mr *MockStore_interfaceMockRecorder) CreateVerifyEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVerifyEmail", reflect.TypeOf((*MockStore_interface)(nil).CreateVerifyEmail), arg0, arg1)
}

// CreateWallet mocks base method.
func (m *MockStore_interface) CreateWallet(arg0 context.Context, arg1 db.CreateWalletParams) (db.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWallet", arg0, arg1)
	ret0, _ := ret[0].(db.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWallet indicates an expected call of CreateWallet.
func (mr *MockStore_interfaceMockRecorder) CreateWallet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWallet", reflect.TypeOf((*MockStore_interface)(nil).CreateWallet), arg0, arg1)
}

// DeleteAuditLog mocks base method.
func (m *MockStore_interface) DeleteAuditLog(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAuditLog", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAuditLog indicates an expected call of DeleteAuditLog.
func (mr *MockStore_interfaceMockRecorder) DeleteAuditLog(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAuditLog", reflect.TypeOf((*MockStore_interface)(nil).DeleteAuditLog), arg0, arg1)
}

// DeleteFee mocks base method.
func (m *MockStore_interface) DeleteFee(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFee", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFee indicates an expected call of DeleteFee.
func (mr *MockStore_interfaceMockRecorder) DeleteFee(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFee", reflect.TypeOf((*MockStore_interface)(nil).DeleteFee), arg0, arg1)
}

// DeleteMarket mocks base method.
func (m *MockStore_interface) DeleteMarket(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMarket", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMarket indicates an expected call of DeleteMarket.
func (mr *MockStore_interfaceMockRecorder) DeleteMarket(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMarket", reflect.TypeOf((*MockStore_interface)(nil).DeleteMarket), arg0, arg1)
}

// DeleteOrder mocks base method.
func (m *MockStore_interface) DeleteOrder(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrder", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrder indicates an expected call of DeleteOrder.
func (mr *MockStore_interfaceMockRecorder) DeleteOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrder", reflect.TypeOf((*MockStore_interface)(nil).DeleteOrder), arg0, arg1)
}

// DeleteTrade mocks base method.
func (m *MockStore_interface) DeleteTrade(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTrade", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTrade indicates an expected call of DeleteTrade.
func (mr *MockStore_interfaceMockRecorder) DeleteTrade(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTrade", reflect.TypeOf((*MockStore_interface)(nil).DeleteTrade), arg0, arg1)
}

// DeleteTransaction mocks base method.
func (m *MockStore_interface) DeleteTransaction(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTransaction", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTransaction indicates an expected call of DeleteTransaction.
func (mr *MockStore_interfaceMockRecorder) DeleteTransaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTransaction", reflect.TypeOf((*MockStore_interface)(nil).DeleteTransaction), arg0, arg1)
}

// DeleteUser mocks base method.
func (m *MockStore_interface) DeleteUser(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockStore_interfaceMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockStore_interface)(nil).DeleteUser), arg0, arg1)
}

// DeleteWallet mocks base method.
func (m *MockStore_interface) DeleteWallet(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWallet", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWallet indicates an expected call of DeleteWallet.
func (mr *MockStore_interfaceMockRecorder) DeleteWallet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWallet", reflect.TypeOf((*MockStore_interface)(nil).DeleteWallet), arg0, arg1)
}

// GetAuditLogsByUserEmail mocks base method.
func (m *MockStore_interface) GetAuditLogsByUserEmail(arg0 context.Context, arg1 string) ([]db.AuditLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuditLogsByUserEmail", arg0, arg1)
	ret0, _ := ret[0].([]db.AuditLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuditLogsByUserEmail indicates an expected call of GetAuditLogsByUserEmail.
func (mr *MockStore_interfaceMockRecorder) GetAuditLogsByUserEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuditLogsByUserEmail", reflect.TypeOf((*MockStore_interface)(nil).GetAuditLogsByUserEmail), arg0, arg1)
}

// GetFeeByMarketID mocks base method.
func (m *MockStore_interface) GetFeeByMarketID(arg0 context.Context, arg1 uuid.UUID) (db.Fee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeeByMarketID", arg0, arg1)
	ret0, _ := ret[0].(db.Fee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeeByMarketID indicates an expected call of GetFeeByMarketID.
func (mr *MockStore_interfaceMockRecorder) GetFeeByMarketID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeeByMarketID", reflect.TypeOf((*MockStore_interface)(nil).GetFeeByMarketID), arg0, arg1)
}

// GetGoogleUserByEmail mocks base method.
func (m *MockStore_interface) GetGoogleUserByEmail(arg0 context.Context, arg1 string) (db.GoogleAuth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGoogleUserByEmail", arg0, arg1)
	ret0, _ := ret[0].(db.GoogleAuth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGoogleUserByEmail indicates an expected call of GetGoogleUserByEmail.
func (mr *MockStore_interfaceMockRecorder) GetGoogleUserByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGoogleUserByEmail", reflect.TypeOf((*MockStore_interface)(nil).GetGoogleUserByEmail), arg0, arg1)
}

// GetGoogleUserByProviderID mocks base method.
func (m *MockStore_interface) GetGoogleUserByProviderID(arg0 context.Context, arg1 string) (db.GoogleAuth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGoogleUserByProviderID", arg0, arg1)
	ret0, _ := ret[0].(db.GoogleAuth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGoogleUserByProviderID indicates an expected call of GetGoogleUserByProviderID.
func (mr *MockStore_interfaceMockRecorder) GetGoogleUserByProviderID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGoogleUserByProviderID", reflect.TypeOf((*MockStore_interface)(nil).GetGoogleUserByProviderID), arg0, arg1)
}

// GetMarketByCurrencies mocks base method.
func (m *MockStore_interface) GetMarketByCurrencies(arg0 context.Context, arg1 db.GetMarketByCurrenciesParams) (db.Market, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMarketByCurrencies", arg0, arg1)
	ret0, _ := ret[0].(db.Market)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMarketByCurrencies indicates an expected call of GetMarketByCurrencies.
func (mr *MockStore_interfaceMockRecorder) GetMarketByCurrencies(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMarketByCurrencies", reflect.TypeOf((*MockStore_interface)(nil).GetMarketByCurrencies), arg0, arg1)
}

// GetMarketByID mocks base method.
func (m *MockStore_interface) GetMarketByID(arg0 context.Context, arg1 uuid.UUID) (db.Market, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMarketByID", arg0, arg1)
	ret0, _ := ret[0].(db.Market)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMarketByID indicates an expected call of GetMarketByID.
func (mr *MockStore_interfaceMockRecorder) GetMarketByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMarketByID", reflect.TypeOf((*MockStore_interface)(nil).GetMarketByID), arg0, arg1)
}

// GetOrderByID mocks base method.
func (m *MockStore_interface) GetOrderByID(arg0 context.Context, arg1 uuid.UUID) (db.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByID", arg0, arg1)
	ret0, _ := ret[0].(db.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderByID indicates an expected call of GetOrderByID.
func (mr *MockStore_interfaceMockRecorder) GetOrderByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByID", reflect.TypeOf((*MockStore_interface)(nil).GetOrderByID), arg0, arg1)
}

// GetSession mocks base method.
func (m *MockStore_interface) GetSession(arg0 context.Context, arg1 uuid.UUID) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", arg0, arg1)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *MockStore_interfaceMockRecorder) GetSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockStore_interface)(nil).GetSession), arg0, arg1)
}

// GetTradeByID mocks base method.
func (m *MockStore_interface) GetTradeByID(arg0 context.Context, arg1 uuid.UUID) (db.Trade, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTradeByID", arg0, arg1)
	ret0, _ := ret[0].(db.Trade)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTradeByID indicates an expected call of GetTradeByID.
func (mr *MockStore_interfaceMockRecorder) GetTradeByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTradeByID", reflect.TypeOf((*MockStore_interface)(nil).GetTradeByID), arg0, arg1)
}

// GetTradesByMarketID mocks base method.
func (m *MockStore_interface) GetTradesByMarketID(arg0 context.Context, arg1 uuid.UUID) ([]db.Trade, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTradesByMarketID", arg0, arg1)
	ret0, _ := ret[0].([]db.Trade)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTradesByMarketID indicates an expected call of GetTradesByMarketID.
func (mr *MockStore_interfaceMockRecorder) GetTradesByMarketID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTradesByMarketID", reflect.TypeOf((*MockStore_interface)(nil).GetTradesByMarketID), arg0, arg1)
}

// GetTransactionByID mocks base method.
func (m *MockStore_interface) GetTransactionByID(arg0 context.Context, arg1 uuid.UUID) (db.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionByID", arg0, arg1)
	ret0, _ := ret[0].(db.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionByID indicates an expected call of GetTransactionByID.
func (mr *MockStore_interfaceMockRecorder) GetTransactionByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionByID", reflect.TypeOf((*MockStore_interface)(nil).GetTransactionByID), arg0, arg1)
}

// GetTransactionsByUserEmail mocks base method.
func (m *MockStore_interface) GetTransactionsByUserEmail(arg0 context.Context, arg1 string) ([]db.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionsByUserEmail", arg0, arg1)
	ret0, _ := ret[0].([]db.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionsByUserEmail indicates an expected call of GetTransactionsByUserEmail.
func (mr *MockStore_interfaceMockRecorder) GetTransactionsByUserEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionsByUserEmail", reflect.TypeOf((*MockStore_interface)(nil).GetTransactionsByUserEmail), arg0, arg1)
}

// GetUserByEmail mocks base method.
func (m *MockStore_interface) GetUserByEmail(arg0 context.Context, arg1 string) (db.GetUserByEmailRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", arg0, arg1)
	ret0, _ := ret[0].(db.GetUserByEmailRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockStore_interfaceMockRecorder) GetUserByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockStore_interface)(nil).GetUserByEmail), arg0, arg1)
}

// GetUserByID mocks base method.
func (m *MockStore_interface) GetUserByID(arg0 context.Context, arg1 uuid.UUID) (db.GetUserByIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", arg0, arg1)
	ret0, _ := ret[0].(db.GetUserByIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockStore_interfaceMockRecorder) GetUserByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockStore_interface)(nil).GetUserByID), arg0, arg1)
}

// GetWalletByID mocks base method.
func (m *MockStore_interface) GetWalletByID(arg0 context.Context, arg1 uuid.UUID) (db.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletByID", arg0, arg1)
	ret0, _ := ret[0].(db.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletByID indicates an expected call of GetWalletByID.
func (mr *MockStore_interfaceMockRecorder) GetWalletByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletByID", reflect.TypeOf((*MockStore_interface)(nil).GetWalletByID), arg0, arg1)
}

// ListMarkets mocks base method.
func (m *MockStore_interface) ListMarkets(arg0 context.Context) ([]db.ListMarketsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMarkets", arg0)
	ret0, _ := ret[0].([]db.ListMarketsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMarkets indicates an expected call of ListMarkets.
func (mr *MockStore_interfaceMockRecorder) ListMarkets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMarkets", reflect.TypeOf((*MockStore_interface)(nil).ListMarkets), arg0)
}

// ListOrders mocks base method.
func (m *MockStore_interface) ListOrders(arg0 context.Context) ([]db.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrders", arg0)
	ret0, _ := ret[0].([]db.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrders indicates an expected call of ListOrders.
func (mr *MockStore_interfaceMockRecorder) ListOrders(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrders", reflect.TypeOf((*MockStore_interface)(nil).ListOrders), arg0)
}

// UpdateOrderStatusAndFilledAmount mocks base method.
func (m *MockStore_interface) UpdateOrderStatusAndFilledAmount(arg0 context.Context, arg1 db.UpdateOrderStatusAndFilledAmountParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderStatusAndFilledAmount", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrderStatusAndFilledAmount indicates an expected call of UpdateOrderStatusAndFilledAmount.
func (mr *MockStore_interfaceMockRecorder) UpdateOrderStatusAndFilledAmount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderStatusAndFilledAmount", reflect.TypeOf((*MockStore_interface)(nil).UpdateOrderStatusAndFilledAmount), arg0, arg1)
}

// UpdateTransactionStatus mocks base method.
func (m *MockStore_interface) UpdateTransactionStatus(arg0 context.Context, arg1 db.UpdateTransactionStatusParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTransactionStatus", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTransactionStatus indicates an expected call of UpdateTransactionStatus.
func (mr *MockStore_interfaceMockRecorder) UpdateTransactionStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTransactionStatus", reflect.TypeOf((*MockStore_interface)(nil).UpdateTransactionStatus), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockStore_interface) UpdateUser(arg0 context.Context, arg1 db.UpdateUserParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockStore_interfaceMockRecorder) UpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockStore_interface)(nil).UpdateUser), arg0, arg1)
}

// UpdateVerifyEmail mocks base method.
func (m *MockStore_interface) UpdateVerifyEmail(arg0 context.Context, arg1 db.UpdateVerifyEmailParams) (db.VerifyEmail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVerifyEmail", arg0, arg1)
	ret0, _ := ret[0].(db.VerifyEmail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVerifyEmail indicates an expected call of UpdateVerifyEmail.
func (mr *MockStore_interfaceMockRecorder) UpdateVerifyEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVerifyEmail", reflect.TypeOf((*MockStore_interface)(nil).UpdateVerifyEmail), arg0, arg1)
}

// UpdateWalletBalance mocks base method.
func (m *MockStore_interface) UpdateWalletBalance(arg0 context.Context, arg1 db.UpdateWalletBalanceParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWalletBalance", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWalletBalance indicates an expected call of UpdateWalletBalance.
func (mr *MockStore_interfaceMockRecorder) UpdateWalletBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWalletBalance", reflect.TypeOf((*MockStore_interface)(nil).UpdateWalletBalance), arg0, arg1)
}

// UpdatedOrderTx mocks base method.
func (m *MockStore_interface) UpdatedOrderTx(arg0 context.Context, arg1 db.UpdatedOrderParams) (db.ReturnAmountParams, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatedOrderTx", arg0, arg1)
	ret0, _ := ret[0].(db.ReturnAmountParams)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatedOrderTx indicates an expected call of UpdatedOrderTx.
func (mr *MockStore_interfaceMockRecorder) UpdatedOrderTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatedOrderTx", reflect.TypeOf((*MockStore_interface)(nil).UpdatedOrderTx), arg0, arg1)
}

// VerifyEmailTx mocks base method.
func (m *MockStore_interface) VerifyEmailTx(arg0 context.Context, arg1 db.VerifyEmailTxParams) (db.VerifyEmailTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyEmailTx", arg0, arg1)
	ret0, _ := ret[0].(db.VerifyEmailTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyEmailTx indicates an expected call of VerifyEmailTx.
func (mr *MockStore_interfaceMockRecorder) VerifyEmailTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyEmailTx", reflect.TypeOf((*MockStore_interface)(nil).VerifyEmailTx), arg0, arg1)
}
