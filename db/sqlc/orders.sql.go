// Code generated by sqlc. DO NOT EDIT.
// source: orders.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (user_id, market_id, type, status, price, amount)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, user_id, market_id, type, status, price, amount, filled_amount, created_at, updated_at
`

type CreateOrderParams struct {
	UserID   uuid.UUID      `json:"user_id"`
	MarketID uuid.UUID      `json:"market_id"`
	Type     OrderType      `json:"type"`
	Status   OrderStatus    `json:"status"`
	Price    sql.NullString `json:"price"`
	Amount   string         `json:"amount"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, createOrder,
		arg.UserID,
		arg.MarketID,
		arg.Type,
		arg.Status,
		arg.Price,
		arg.Amount,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.MarketID,
		&i.Type,
		&i.Status,
		&i.Price,
		&i.Amount,
		&i.FilledAmount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteOrder = `-- name: DeleteOrder :exec
DELETE FROM orders
WHERE id = $1
`

func (q *Queries) DeleteOrder(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteOrder, id)
	return err
}

const getOrderByID = `-- name: GetOrderByID :one
SELECT id, user_id, market_id, type, status, price, amount, filled_amount, created_at, updated_at
FROM orders
WHERE id = $1
`

func (q *Queries) GetOrderByID(ctx context.Context, id uuid.UUID) (Order, error) {
	row := q.db.QueryRowContext(ctx, getOrderByID, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.MarketID,
		&i.Type,
		&i.Status,
		&i.Price,
		&i.Amount,
		&i.FilledAmount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateOrderStatusAndFilledAmount = `-- name: UpdateOrderStatusAndFilledAmount :exec
UPDATE orders
SET status = $1, filled_amount = $2, updated_at = CURRENT_TIMESTAMP
WHERE id = $3
`

type UpdateOrderStatusAndFilledAmountParams struct {
	Status       OrderStatus    `json:"status"`
	FilledAmount sql.NullString `json:"filled_amount"`
	ID           uuid.UUID      `json:"id"`
}

func (q *Queries) UpdateOrderStatusAndFilledAmount(ctx context.Context, arg UpdateOrderStatusAndFilledAmountParams) error {
	_, err := q.db.ExecContext(ctx, updateOrderStatusAndFilledAmount, arg.Status, arg.FilledAmount, arg.ID)
	return err
}
