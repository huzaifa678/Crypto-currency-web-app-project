// Code generated by sqlc. DO NOT EDIT.
// source: transactions.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO transactions (user_email, type, currency, amount, address, tx_hash)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, user_email, type, currency, amount, status, address, tx_hash, created_at
`

type CreateTransactionParams struct {
	UserEmail string          `json:"user_email"`
	Type      TransactionType `json:"type"`
	Currency  string          `json:"currency"`
	Amount    string          `json:"amount"`
	Address   sql.NullString  `json:"address"`
	TxHash    sql.NullString  `json:"tx_hash"`
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, createTransaction,
		arg.UserEmail,
		arg.Type,
		arg.Currency,
		arg.Amount,
		arg.Address,
		arg.TxHash,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.UserEmail,
		&i.Type,
		&i.Currency,
		&i.Amount,
		&i.Status,
		&i.Address,
		&i.TxHash,
		&i.CreatedAt,
	)
	return i, err
}

const deleteTransaction = `-- name: DeleteTransaction :exec
DELETE FROM transactions
WHERE id = $1
`

func (q *Queries) DeleteTransaction(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteTransaction, id)
	return err
}

const getTransactionByID = `-- name: GetTransactionByID :one
SELECT id, user_email, type, currency, amount, status, address, tx_hash, created_at
FROM transactions
WHERE id = $1
`

func (q *Queries) GetTransactionByID(ctx context.Context, id uuid.UUID) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, getTransactionByID, id)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.UserEmail,
		&i.Type,
		&i.Currency,
		&i.Amount,
		&i.Status,
		&i.Address,
		&i.TxHash,
		&i.CreatedAt,
	)
	return i, err
}

const getTransactionsByUserEmail = `-- name: GetTransactionsByUserEmail :many
SELECT id, user_email, type, currency, amount, status, address, tx_hash, created_at
FROM transactions
WHERE user_email = $1
ORDER BY created_at DESC
`

func (q *Queries) GetTransactionsByUserEmail(ctx context.Context, userEmail string) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, getTransactionsByUserEmail, userEmail)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.UserEmail,
			&i.Type,
			&i.Currency,
			&i.Amount,
			&i.Status,
			&i.Address,
			&i.TxHash,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTransactionStatus = `-- name: UpdateTransactionStatus :exec
UPDATE transactions
SET status = $1
WHERE id = $2
`

type UpdateTransactionStatusParams struct {
	Status TransactionStatus `json:"status"`
	ID     uuid.UUID         `json:"id"`
}

func (q *Queries) UpdateTransactionStatus(ctx context.Context, arg UpdateTransactionStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateTransactionStatus, arg.Status, arg.ID)
	return err
}
