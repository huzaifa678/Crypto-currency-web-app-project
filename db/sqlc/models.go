// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type OrderStatus string

const (
	OrderStatusOpen            OrderStatus = "open"
	OrderStatusPartiallyFilled OrderStatus = "partially_filled"
	OrderStatusFilled          OrderStatus = "filled"
	OrderStatusCancelled       OrderStatus = "cancelled"
	OrderStatusOPEN            OrderStatus = "OPEN"
	OrderStatusPARTIALLYFILLED OrderStatus = "PARTIALLY_FILLED"
	OrderStatusFILLED          OrderStatus = "FILLED"
	OrderStatusCANCELLED       OrderStatus = "CANCELLED"
)

func (e *OrderStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = OrderStatus(s)
	case string:
		*e = OrderStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for OrderStatus: %T", src)
	}
	return nil
}

type NullOrderStatus struct {
	OrderStatus OrderStatus `json:"order_status"`
	Valid       bool        `json:"valid"` // Valid is true if OrderStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullOrderStatus) Scan(value interface{}) error {
	if value == nil {
		ns.OrderStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.OrderStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullOrderStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.OrderStatus), nil
}

type OrderType string

const (
	OrderTypeBuy  OrderType = "buy"
	OrderTypeSell OrderType = "sell"
	OrderTypeBUY  OrderType = "BUY"
	OrderTypeSELL OrderType = "SELL"
)

func (e *OrderType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = OrderType(s)
	case string:
		*e = OrderType(s)
	default:
		return fmt.Errorf("unsupported scan type for OrderType: %T", src)
	}
	return nil
}

type NullOrderType struct {
	OrderType OrderType `json:"order_type"`
	Valid     bool      `json:"valid"` // Valid is true if OrderType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullOrderType) Scan(value interface{}) error {
	if value == nil {
		ns.OrderType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.OrderType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullOrderType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.OrderType), nil
}

type TransactionStatus string

const (
	TransactionStatusPending   TransactionStatus = "pending"
	TransactionStatusCompleted TransactionStatus = "completed"
	TransactionStatusFailed    TransactionStatus = "failed"
)

func (e *TransactionStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TransactionStatus(s)
	case string:
		*e = TransactionStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for TransactionStatus: %T", src)
	}
	return nil
}

type NullTransactionStatus struct {
	TransactionStatus TransactionStatus `json:"transaction_status"`
	Valid             bool              `json:"valid"` // Valid is true if TransactionStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTransactionStatus) Scan(value interface{}) error {
	if value == nil {
		ns.TransactionStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TransactionStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTransactionStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TransactionStatus), nil
}

type TransactionType string

const (
	TransactionTypeDeposit    TransactionType = "deposit"
	TransactionTypeWithdrawal TransactionType = "withdrawal"
)

func (e *TransactionType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TransactionType(s)
	case string:
		*e = TransactionType(s)
	default:
		return fmt.Errorf("unsupported scan type for TransactionType: %T", src)
	}
	return nil
}

type NullTransactionType struct {
	TransactionType TransactionType `json:"transaction_type"`
	Valid           bool            `json:"valid"` // Valid is true if TransactionType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTransactionType) Scan(value interface{}) error {
	if value == nil {
		ns.TransactionType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TransactionType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTransactionType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TransactionType), nil
}

type UserRole string

const (
	UserRoleAdmin         UserRole = "admin"
	UserRoleUser          UserRole = "user"
	UserRoleUSERROLEADMIN UserRole = "USER_ROLE_ADMIN"
	UserRoleUSERROLEUSER  UserRole = "USER_ROLE_USER"
)

func (e *UserRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserRole(s)
	case string:
		*e = UserRole(s)
	default:
		return fmt.Errorf("unsupported scan type for UserRole: %T", src)
	}
	return nil
}

type NullUserRole struct {
	UserRole UserRole `json:"user_role"`
	Valid    bool     `json:"valid"` // Valid is true if UserRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserRole) Scan(value interface{}) error {
	if value == nil {
		ns.UserRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserRole), nil
}

type AuditLog struct {
	ID        uuid.UUID `json:"id"`
	Username  string    `json:"username"`
	UserEmail string    `json:"user_email"`
	Action    string    `json:"action"`
	IpAddress string    `json:"ip_address"`
	CreatedAt time.Time `json:"created_at"`
}

type Fee struct {
	ID        uuid.UUID `json:"id"`
	Username  string    `json:"username"`
	MarketID  uuid.UUID `json:"market_id"`
	MakerFee  string    `json:"maker_fee"`
	TakerFee  string    `json:"taker_fee"`
	CreatedAt time.Time `json:"created_at"`
}

type Market struct {
	ID             uuid.UUID `json:"id"`
	Username       string    `json:"username"`
	BaseCurrency   string    `json:"base_currency"`
	QuoteCurrency  string    `json:"quote_currency"`
	MinOrderAmount string    `json:"min_order_amount"`
	PricePrecision int32     `json:"price_precision"`
	CreatedAt      time.Time `json:"created_at"`
}

type Order struct {
	ID           uuid.UUID   `json:"id"`
	Username     string      `json:"username"`
	UserEmail    string      `json:"user_email"`
	MarketID     uuid.UUID   `json:"market_id"`
	Type         OrderType   `json:"type"`
	Status       OrderStatus `json:"status"`
	Price        string      `json:"price"`
	Amount       string      `json:"amount"`
	FilledAmount string      `json:"filled_amount"`
	CreatedAt    time.Time   `json:"created_at"`
	UpdatedAt    time.Time   `json:"updated_at"`
}

type Session struct {
	ID           uuid.UUID `json:"id"`
	Username     string    `json:"username"`
	RefreshToken string    `json:"refresh_token"`
	UserAgent    string    `json:"user_agent"`
	ClientIp     string    `json:"client_ip"`
	IsBlocked    bool      `json:"is_blocked"`
	ExpiresAt    time.Time `json:"expires_at"`
}

type Trade struct {
	ID          uuid.UUID `json:"id"`
	Username    string    `json:"username"`
	BuyOrderID  uuid.UUID `json:"buy_order_id"`
	SellOrderID uuid.UUID `json:"sell_order_id"`
	MarketID    uuid.UUID `json:"market_id"`
	Price       string    `json:"price"`
	Amount      string    `json:"amount"`
	Fee         string    `json:"fee"`
	CreatedAt   time.Time `json:"created_at"`
}

type Transaction struct {
	ID        uuid.UUID         `json:"id"`
	Username  string            `json:"username"`
	UserEmail string            `json:"user_email"`
	Type      TransactionType   `json:"type"`
	Currency  string            `json:"currency"`
	Amount    string            `json:"amount"`
	Status    TransactionStatus `json:"status"`
	Address   string            `json:"address"`
	TxHash    string            `json:"tx_hash"`
	CreatedAt time.Time         `json:"created_at"`
}

type User struct {
	ID              uuid.UUID `json:"id"`
	Username        string    `json:"username"`
	Email           string    `json:"email"`
	PasswordHash    string    `json:"password_hash"`
	CreatedAt       time.Time `json:"created_at"`
	UpdatedAt       time.Time `json:"updated_at"`
	IsVerified      bool      `json:"is_verified"`
	Role            UserRole  `json:"role"`
	IsEmailVerified bool      `json:"is_email_verified"`
}

type VerifyEmail struct {
	ID         int64     `json:"id"`
	Username   string    `json:"username"`
	Email      string    `json:"email"`
	SecretCode string    `json:"secret_code"`
	IsUsed     bool      `json:"is_used"`
	CreatedAt  time.Time `json:"created_at"`
	ExpiredAt  time.Time `json:"expired_at"`
}

type Wallet struct {
	ID            uuid.UUID `json:"id"`
	Username      string    `json:"username"`
	UserEmail     string    `json:"user_email"`
	Currency      string    `json:"currency"`
	Balance       string    `json:"balance"`
	LockedBalance string    `json:"locked_balance"`
	CreatedAt     time.Time `json:"created_at"`
}
