// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: fees.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

const createFee = `-- name: CreateFee :one
INSERT INTO fees (username, market_id, maker_fee, taker_fee)
VALUES ($1, $2, $3, $4)
RETURNING id, market_id, maker_fee, taker_fee, created_at
`

type CreateFeeParams struct {
	Username string          `json:"username"`
	MarketID uuid.UUID       `json:"market_id"`
	MakerFee decimal.Decimal `json:"maker_fee"`
	TakerFee decimal.Decimal `json:"taker_fee"`
}

type CreateFeeRow struct {
	ID        uuid.UUID       `json:"id"`
	MarketID  uuid.UUID       `json:"market_id"`
	MakerFee  decimal.Decimal `json:"maker_fee"`
	TakerFee  decimal.Decimal `json:"taker_fee"`
	CreatedAt time.Time       `json:"created_at"`
}

func (q *Queries) CreateFee(ctx context.Context, arg CreateFeeParams) (CreateFeeRow, error) {
	row := q.db.QueryRow(ctx, createFee,
		arg.Username,
		arg.MarketID,
		arg.MakerFee,
		arg.TakerFee,
	)
	var i CreateFeeRow
	err := row.Scan(
		&i.ID,
		&i.MarketID,
		&i.MakerFee,
		&i.TakerFee,
		&i.CreatedAt,
	)
	return i, err
}

const deleteFee = `-- name: DeleteFee :exec
DELETE FROM fees
WHERE id = $1
`

func (q *Queries) DeleteFee(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteFee, id)
	return err
}

const getFeeByMarketID = `-- name: GetFeeByMarketID :one
SELECT id, username, market_id, maker_fee, taker_fee, created_at
FROM fees
WHERE market_id = $1
`

func (q *Queries) GetFeeByMarketID(ctx context.Context, marketID uuid.UUID) (Fee, error) {
	row := q.db.QueryRow(ctx, getFeeByMarketID, marketID)
	var i Fee
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.MarketID,
		&i.MakerFee,
		&i.TakerFee,
		&i.CreatedAt,
	)
	return i, err
}
