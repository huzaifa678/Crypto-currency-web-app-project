// Code generated by sqlc. DO NOT EDIT.
// source: fees.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createFee = `-- name: CreateFee :one
INSERT INTO fees (market_id, maker_fee, taker_fee)
VALUES ($1, $2, $3)
RETURNING id, market_id, maker_fee, taker_fee, created_at
`

type CreateFeeParams struct {
	MarketID uuid.UUID      `json:"market_id"`
	MakerFee sql.NullString `json:"maker_fee"`
	TakerFee sql.NullString `json:"taker_fee"`
}

func (q *Queries) CreateFee(ctx context.Context, arg CreateFeeParams) (Fee, error) {
	row := q.db.QueryRowContext(ctx, createFee, arg.MarketID, arg.MakerFee, arg.TakerFee)
	var i Fee
	err := row.Scan(
		&i.ID,
		&i.MarketID,
		&i.MakerFee,
		&i.TakerFee,
		&i.CreatedAt,
	)
	return i, err
}

const deleteFee = `-- name: DeleteFee :exec
DELETE FROM fees
WHERE id = $1
`

func (q *Queries) DeleteFee(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteFee, id)
	return err
}

const getFeeByMarketID = `-- name: GetFeeByMarketID :one
SELECT id, market_id, maker_fee, taker_fee, created_at
FROM fees
WHERE market_id = $1
`

func (q *Queries) GetFeeByMarketID(ctx context.Context, marketID uuid.UUID) (Fee, error) {
	row := q.db.QueryRowContext(ctx, getFeeByMarketID, marketID)
	var i Fee
	err := row.Scan(
		&i.ID,
		&i.MarketID,
		&i.MakerFee,
		&i.TakerFee,
		&i.CreatedAt,
	)
	return i, err
}
