// Code generated by sqlc. DO NOT EDIT.
// source: audits_log.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createAuditLog = `-- name: CreateAuditLog :one
INSERT INTO audit_logs (user_id, action, ip_address)
VALUES ($1, $2, $3)
RETURNING id, user_id, action, ip_address, created_at
`

type CreateAuditLogParams struct {
	UserID    uuid.UUID      `json:"user_id"`
	Action    string         `json:"action"`
	IpAddress sql.NullString `json:"ip_address"`
}

func (q *Queries) CreateAuditLog(ctx context.Context, arg CreateAuditLogParams) (AuditLog, error) {
	row := q.db.QueryRowContext(ctx, createAuditLog, arg.UserID, arg.Action, arg.IpAddress)
	var i AuditLog
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Action,
		&i.IpAddress,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAuditLog = `-- name: DeleteAuditLog :exec
DELETE FROM audit_logs
WHERE id = $1
`

func (q *Queries) DeleteAuditLog(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteAuditLog, id)
	return err
}

const getAuditLogsByUserID = `-- name: GetAuditLogsByUserID :many
SELECT id, user_id, action, ip_address, created_at
FROM audit_logs
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetAuditLogsByUserID(ctx context.Context, userID uuid.UUID) ([]AuditLog, error) {
	rows, err := q.db.QueryContext(ctx, getAuditLogsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AuditLog
	for rows.Next() {
		var i AuditLog
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Action,
			&i.IpAddress,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
