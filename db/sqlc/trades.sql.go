// Code generated by sqlc. DO NOT EDIT.
// source: trades.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createTrade = `-- name: CreateTrade :one
INSERT INTO trades (username, buy_order_id, sell_order_id, market_id, price, amount, fee)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, username, buy_order_id, sell_order_id, market_id, price, amount, fee, created_at
`

type CreateTradeParams struct {
	Username    string         `json:"username"`
	BuyOrderID  uuid.UUID      `json:"buy_order_id"`
	SellOrderID uuid.UUID      `json:"sell_order_id"`
	MarketID    uuid.UUID      `json:"market_id"`
	Price       string         `json:"price"`
	Amount      string         `json:"amount"`
	Fee         sql.NullString `json:"fee"`
}

func (q *Queries) CreateTrade(ctx context.Context, arg CreateTradeParams) (Trade, error) {
	row := q.db.QueryRowContext(ctx, createTrade,
		arg.Username,
		arg.BuyOrderID,
		arg.SellOrderID,
		arg.MarketID,
		arg.Price,
		arg.Amount,
		arg.Fee,
	)
	var i Trade
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.BuyOrderID,
		&i.SellOrderID,
		&i.MarketID,
		&i.Price,
		&i.Amount,
		&i.Fee,
		&i.CreatedAt,
	)
	return i, err
}

const deleteTrade = `-- name: DeleteTrade :exec
DELETE FROM trades
WHERE id = $1
`

func (q *Queries) DeleteTrade(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteTrade, id)
	return err
}

const getTradeByID = `-- name: GetTradeByID :one
SELECT id, username, buy_order_id, sell_order_id, market_id, price, amount, fee, created_at
FROM trades
WHERE id = $1
`

func (q *Queries) GetTradeByID(ctx context.Context, id uuid.UUID) (Trade, error) {
	row := q.db.QueryRowContext(ctx, getTradeByID, id)
	var i Trade
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.BuyOrderID,
		&i.SellOrderID,
		&i.MarketID,
		&i.Price,
		&i.Amount,
		&i.Fee,
		&i.CreatedAt,
	)
	return i, err
}

const getTradesByMarketID = `-- name: GetTradesByMarketID :many
SELECT id, username, buy_order_id, sell_order_id, market_id, price, amount, fee, created_at
FROM trades
WHERE market_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetTradesByMarketID(ctx context.Context, marketID uuid.UUID) ([]Trade, error) {
	rows, err := q.db.QueryContext(ctx, getTradesByMarketID, marketID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Trade
	for rows.Next() {
		var i Trade
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.BuyOrderID,
			&i.SellOrderID,
			&i.MarketID,
			&i.Price,
			&i.Amount,
			&i.Fee,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
