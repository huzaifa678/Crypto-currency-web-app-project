// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: wallets.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

const createWallet = `-- name: CreateWallet :one
INSERT INTO wallets (username, user_email, currency, balance)
VALUES ($1, $2, $3, $4)
RETURNING id, username, user_email, currency, balance, locked_balance, created_at
`

type CreateWalletParams struct {
	Username  string          `json:"username"`
	UserEmail string          `json:"user_email"`
	Currency  string          `json:"currency"`
	Balance   decimal.Decimal `json:"balance"`
}

func (q *Queries) CreateWallet(ctx context.Context, arg CreateWalletParams) (Wallet, error) {
	row := q.db.QueryRow(ctx, createWallet,
		arg.Username,
		arg.UserEmail,
		arg.Currency,
		arg.Balance,
	)
	var i Wallet
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.UserEmail,
		&i.Currency,
		&i.Balance,
		&i.LockedBalance,
		&i.CreatedAt,
	)
	return i, err
}

const deleteWallet = `-- name: DeleteWallet :exec
DELETE FROM wallets
WHERE id = $1
`

func (q *Queries) DeleteWallet(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteWallet, id)
	return err
}

const getWalletByID = `-- name: GetWalletByID :one
SELECT id, username, user_email, currency, balance, locked_balance, created_at
FROM wallets
WHERE id = $1
`

func (q *Queries) GetWalletByID(ctx context.Context, id uuid.UUID) (Wallet, error) {
	row := q.db.QueryRow(ctx, getWalletByID, id)
	var i Wallet
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.UserEmail,
		&i.Currency,
		&i.Balance,
		&i.LockedBalance,
		&i.CreatedAt,
	)
	return i, err
}

const getWallets = `-- name: GetWallets :many
SELECT id, username, user_email, currency, balance, locked_balance, created_at
FROM wallets
ORDER BY created_at DESC
`

func (q *Queries) GetWallets(ctx context.Context) ([]Wallet, error) {
	rows, err := q.db.Query(ctx, getWallets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Wallet
	for rows.Next() {
		var i Wallet
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.UserEmail,
			&i.Currency,
			&i.Balance,
			&i.LockedBalance,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateWalletBalance = `-- name: UpdateWalletBalance :exec
UPDATE wallets
SET balance = $1, locked_balance = $2
WHERE id = $3
`

type UpdateWalletBalanceParams struct {
	Balance       decimal.Decimal `json:"balance"`
	LockedBalance decimal.Decimal `json:"locked_balance"`
	ID            uuid.UUID       `json:"id"`
}

func (q *Queries) UpdateWalletBalance(ctx context.Context, arg UpdateWalletBalanceParams) error {
	_, err := q.db.Exec(ctx, updateWalletBalance, arg.Balance, arg.LockedBalance, arg.ID)
	return err
}
