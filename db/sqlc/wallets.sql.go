// Code generated by sqlc. DO NOT EDIT.
// source: wallets.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createWallet = `-- name: CreateWallet :one
INSERT INTO wallets (user_email, currency, balance)
VALUES ($1, $2, $3)
RETURNING id, user_email, currency, balance, locked_balance, created_at
`

type CreateWalletParams struct {
	UserEmail string         `json:"user_email"`
	Currency  string         `json:"currency"`
	Balance   sql.NullString `json:"balance"`
}

func (q *Queries) CreateWallet(ctx context.Context, arg CreateWalletParams) (Wallet, error) {
	row := q.db.QueryRowContext(ctx, createWallet, arg.UserEmail, arg.Currency, arg.Balance)
	var i Wallet
	err := row.Scan(
		&i.ID,
		&i.UserEmail,
		&i.Currency,
		&i.Balance,
		&i.LockedBalance,
		&i.CreatedAt,
	)
	return i, err
}

const deleteWallet = `-- name: DeleteWallet :exec
DELETE FROM wallets
WHERE id = $1
`

func (q *Queries) DeleteWallet(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteWallet, id)
	return err
}

const getWalletByUserEmailAndCurrency = `-- name: GetWalletByUserEmailAndCurrency :one
SELECT user_email, currency, balance, locked_balance, created_at
FROM wallets
WHERE user_email = $1 AND currency = $2
`

type GetWalletByUserEmailAndCurrencyParams struct {
	UserEmail string `json:"user_email"`
	Currency  string `json:"currency"`
}

type GetWalletByUserEmailAndCurrencyRow struct {
	UserEmail     string         `json:"user_email"`
	Currency      string         `json:"currency"`
	Balance       sql.NullString `json:"balance"`
	LockedBalance sql.NullString `json:"locked_balance"`
	CreatedAt     sql.NullTime   `json:"created_at"`
}

func (q *Queries) GetWalletByUserEmailAndCurrency(ctx context.Context, arg GetWalletByUserEmailAndCurrencyParams) (GetWalletByUserEmailAndCurrencyRow, error) {
	row := q.db.QueryRowContext(ctx, getWalletByUserEmailAndCurrency, arg.UserEmail, arg.Currency)
	var i GetWalletByUserEmailAndCurrencyRow
	err := row.Scan(
		&i.UserEmail,
		&i.Currency,
		&i.Balance,
		&i.LockedBalance,
		&i.CreatedAt,
	)
	return i, err
}

const updateWalletBalance = `-- name: UpdateWalletBalance :exec
UPDATE wallets
SET balance = $1, locked_balance = $2
WHERE user_email = $3 AND currency = $4
`

type UpdateWalletBalanceParams struct {
	Balance       sql.NullString `json:"balance"`
	LockedBalance sql.NullString `json:"locked_balance"`
	UserEmail     string         `json:"user_email"`
	Currency      string         `json:"currency"`
}

func (q *Queries) UpdateWalletBalance(ctx context.Context, arg UpdateWalletBalanceParams) error {
	_, err := q.db.ExecContext(ctx, updateWalletBalance,
		arg.Balance,
		arg.LockedBalance,
		arg.UserEmail,
		arg.Currency,
	)
	return err
}
