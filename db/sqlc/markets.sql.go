// Code generated by sqlc. DO NOT EDIT.
// source: markets.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createMarket = `-- name: CreateMarket :one
INSERT INTO markets (base_currency, quote_currency, min_order_amount, price_precision)
VALUES ($1, $2, $3, $4)
RETURNING id, base_currency, quote_currency, created_at
`

type CreateMarketParams struct {
	BaseCurrency   string         `json:"base_currency"`
	QuoteCurrency  string         `json:"quote_currency"`
	MinOrderAmount sql.NullString `json:"min_order_amount"`
	PricePrecision sql.NullInt32  `json:"price_precision"`
}

type CreateMarketRow struct {
	ID            uuid.UUID    `json:"id"`
	BaseCurrency  string       `json:"base_currency"`
	QuoteCurrency string       `json:"quote_currency"`
	CreatedAt     sql.NullTime `json:"created_at"`
}

func (q *Queries) CreateMarket(ctx context.Context, arg CreateMarketParams) (CreateMarketRow, error) {
	row := q.db.QueryRowContext(ctx, createMarket,
		arg.BaseCurrency,
		arg.QuoteCurrency,
		arg.MinOrderAmount,
		arg.PricePrecision,
	)
	var i CreateMarketRow
	err := row.Scan(
		&i.ID,
		&i.BaseCurrency,
		&i.QuoteCurrency,
		&i.CreatedAt,
	)
	return i, err
}

const deleteMarket = `-- name: DeleteMarket :exec
DELETE FROM markets
WHERE id = $1
`

func (q *Queries) DeleteMarket(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteMarket, id)
	return err
}

const getMarketByCurrencies = `-- name: GetMarketByCurrencies :one
SELECT id, base_currency, quote_currency, min_order_amount, price_precision, created_at
FROM markets
WHERE base_currency = $1 AND quote_currency = $2
`

type GetMarketByCurrenciesParams struct {
	BaseCurrency  string `json:"base_currency"`
	QuoteCurrency string `json:"quote_currency"`
}

func (q *Queries) GetMarketByCurrencies(ctx context.Context, arg GetMarketByCurrenciesParams) (Market, error) {
	row := q.db.QueryRowContext(ctx, getMarketByCurrencies, arg.BaseCurrency, arg.QuoteCurrency)
	var i Market
	err := row.Scan(
		&i.ID,
		&i.BaseCurrency,
		&i.QuoteCurrency,
		&i.MinOrderAmount,
		&i.PricePrecision,
		&i.CreatedAt,
	)
	return i, err
}

const getMarketByID = `-- name: GetMarketByID :one
SELECT id, base_currency, quote_currency, min_order_amount, price_precision, created_at
FROM markets
WHERE id = $1
`

func (q *Queries) GetMarketByID(ctx context.Context, id uuid.UUID) (Market, error) {
	row := q.db.QueryRowContext(ctx, getMarketByID, id)
	var i Market
	err := row.Scan(
		&i.ID,
		&i.BaseCurrency,
		&i.QuoteCurrency,
		&i.MinOrderAmount,
		&i.PricePrecision,
		&i.CreatedAt,
	)
	return i, err
}

const listMarkets = `-- name: ListMarkets :many
SELECT id, base_currency, quote_currency, min_order_amount, price_precision, created_at
FROM markets
ORDER BY created_at DESC
`

func (q *Queries) ListMarkets(ctx context.Context) ([]Market, error) {
	rows, err := q.db.QueryContext(ctx, listMarkets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Market
	for rows.Next() {
		var i Market
		if err := rows.Scan(
			&i.ID,
			&i.BaseCurrency,
			&i.QuoteCurrency,
			&i.MinOrderAmount,
			&i.PricePrecision,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
