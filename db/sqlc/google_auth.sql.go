// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: google_auth.sql

package db

import (
	"context"
)

const createGoogleUser = `-- name: CreateGoogleUser :one
INSERT INTO google_auth (
    email, username, provider, provider_id, role
) VALUES (
    $1, $2, 'google', $3, 'user'
)
RETURNING id, email, username, provider, provider_id, role, created_at
`

type CreateGoogleUserParams struct {
	Email      string `json:"email"`
	Username   string `json:"username"`
	ProviderID string `json:"provider_id"`
}

func (q *Queries) CreateGoogleUser(ctx context.Context, arg CreateGoogleUserParams) (GoogleAuth, error) {
	row := q.db.QueryRow(ctx, createGoogleUser, arg.Email, arg.Username, arg.ProviderID)
	var i GoogleAuth
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Provider,
		&i.ProviderID,
		&i.Role,
		&i.CreatedAt,
	)
	return i, err
}

const getGoogleUserByEmail = `-- name: GetGoogleUserByEmail :one
SELECT id, email, username, provider, provider_id, role, created_at FROM google_auth WHERE email = $1 LIMIT 1
`

func (q *Queries) GetGoogleUserByEmail(ctx context.Context, email string) (GoogleAuth, error) {
	row := q.db.QueryRow(ctx, getGoogleUserByEmail, email)
	var i GoogleAuth
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Provider,
		&i.ProviderID,
		&i.Role,
		&i.CreatedAt,
	)
	return i, err
}

const getGoogleUserByProviderID = `-- name: GetGoogleUserByProviderID :one
SELECT id, email, username, provider, provider_id, role, created_at FROM google_auth WHERE provider_id = $1 LIMIT 1
`

func (q *Queries) GetGoogleUserByProviderID(ctx context.Context, providerID string) (GoogleAuth, error) {
	row := q.db.QueryRow(ctx, getGoogleUserByProviderID, providerID)
	var i GoogleAuth
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Provider,
		&i.ProviderID,
		&i.Role,
		&i.CreatedAt,
	)
	return i, err
}
