// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.19.6
// source: rpc_binance_stream.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TradeStreamRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Symbols       []string               `protobuf:"bytes,1,rep,name=symbols,proto3" json:"symbols,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TradeStreamRequest) Reset() {
	*x = TradeStreamRequest{}
	mi := &file_rpc_binance_stream_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TradeStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeStreamRequest) ProtoMessage() {}

func (x *TradeStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_binance_stream_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeStreamRequest.ProtoReflect.Descriptor instead.
func (*TradeStreamRequest) Descriptor() ([]byte, []int) {
	return file_rpc_binance_stream_proto_rawDescGZIP(), []int{0}
}

func (x *TradeStreamRequest) GetSymbols() []string {
	if x != nil {
		return x.Symbols
	}
	return nil
}

type Trade struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Symbol        string                 `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Price         float64                `protobuf:"fixed64,2,opt,name=price,proto3" json:"price,omitempty"`
	Quantity      float64                `protobuf:"fixed64,3,opt,name=quantity,proto3" json:"quantity,omitempty"`
	TradeId       int64                  `protobuf:"varint,4,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`
	EventTime     int64                  `protobuf:"varint,5,opt,name=event_time,json=eventTime,proto3" json:"event_time,omitempty"`
	TradeTime     int64                  `protobuf:"varint,6,opt,name=trade_time,json=tradeTime,proto3" json:"trade_time,omitempty"`
	IsBuyerMaker  bool                   `protobuf:"varint,7,opt,name=is_buyer_maker,json=isBuyerMaker,proto3" json:"is_buyer_maker,omitempty"`
	RawJson       string                 `protobuf:"bytes,8,opt,name=raw_json,json=rawJson,proto3" json:"raw_json,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Trade) Reset() {
	*x = Trade{}
	mi := &file_rpc_binance_stream_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Trade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trade) ProtoMessage() {}

func (x *Trade) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_binance_stream_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trade.ProtoReflect.Descriptor instead.
func (*Trade) Descriptor() ([]byte, []int) {
	return file_rpc_binance_stream_proto_rawDescGZIP(), []int{1}
}

func (x *Trade) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *Trade) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Trade) GetQuantity() float64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *Trade) GetTradeId() int64 {
	if x != nil {
		return x.TradeId
	}
	return 0
}

func (x *Trade) GetEventTime() int64 {
	if x != nil {
		return x.EventTime
	}
	return 0
}

func (x *Trade) GetTradeTime() int64 {
	if x != nil {
		return x.TradeTime
	}
	return 0
}

func (x *Trade) GetIsBuyerMaker() bool {
	if x != nil {
		return x.IsBuyerMaker
	}
	return false
}

func (x *Trade) GetRawJson() string {
	if x != nil {
		return x.RawJson
	}
	return ""
}

var File_rpc_binance_stream_proto protoreflect.FileDescriptor

const file_rpc_binance_stream_proto_rawDesc = "" +
	"\n" +
	"\x18rpc_binance_stream.proto\x12\x02pb\".\n" +
	"\x12TradeStreamRequest\x12\x18\n" +
	"\asymbols\x18\x01 \x03(\tR\asymbols\"\xeb\x01\n" +
	"\x05Trade\x12\x16\n" +
	"\x06symbol\x18\x01 \x01(\tR\x06symbol\x12\x14\n" +
	"\x05price\x18\x02 \x01(\x01R\x05price\x12\x1a\n" +
	"\bquantity\x18\x03 \x01(\x01R\bquantity\x12\x19\n" +
	"\btrade_id\x18\x04 \x01(\x03R\atradeId\x12\x1d\n" +
	"\n" +
	"event_time\x18\x05 \x01(\x03R\teventTime\x12\x1d\n" +
	"\n" +
	"trade_time\x18\x06 \x01(\x03R\ttradeTime\x12$\n" +
	"\x0eis_buyer_maker\x18\a \x01(\bR\fisBuyerMaker\x12\x19\n" +
	"\braw_json\x18\b \x01(\tR\arawJsonB:Z8github.com/huzaifa678/Crypto-currency-web-app-project/pbb\x06proto3"

var (
	file_rpc_binance_stream_proto_rawDescOnce sync.Once
	file_rpc_binance_stream_proto_rawDescData []byte
)

func file_rpc_binance_stream_proto_rawDescGZIP() []byte {
	file_rpc_binance_stream_proto_rawDescOnce.Do(func() {
		file_rpc_binance_stream_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_rpc_binance_stream_proto_rawDesc), len(file_rpc_binance_stream_proto_rawDesc)))
	})
	return file_rpc_binance_stream_proto_rawDescData
}

var file_rpc_binance_stream_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_rpc_binance_stream_proto_goTypes = []any{
	(*TradeStreamRequest)(nil), // 0: pb.TradeStreamRequest
	(*Trade)(nil),              // 1: pb.Trade
}
var file_rpc_binance_stream_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_rpc_binance_stream_proto_init() }
func file_rpc_binance_stream_proto_init() {
	if File_rpc_binance_stream_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_rpc_binance_stream_proto_rawDesc), len(file_rpc_binance_stream_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_rpc_binance_stream_proto_goTypes,
		DependencyIndexes: file_rpc_binance_stream_proto_depIdxs,
		MessageInfos:      file_rpc_binance_stream_proto_msgTypes,
	}.Build()
	File_rpc_binance_stream_proto = out.File
	file_rpc_binance_stream_proto_goTypes = nil
	file_rpc_binance_stream_proto_depIdxs = nil
}
