syntax = "proto3";

package pb;

import "google/protobuf/empty.proto";
import "rpc_create_market.proto";
import "rpc_delete_market.proto";
import "rpc_get_market.proto";
import "rpc_list_market.proto";
import "rpc_create_order.proto";
import "rpc_delete_order.proto";
import "rpc_get_order.proto";
import "rpc_create_user.proto";
import "rpc_delete_user.proto";
import "rpc_update_user.proto";
import "rpc_get_user.proto";
import "rpc_login_user.proto";
import "rpc_create_wallet.proto";
import "rpc_delete_wallet.proto";
import "rpc_update_wallet.proto";
import "rpc_get_wallet.proto";
import "rpc_verify_email.proto";
import "rpc_binance_stream.proto";
import "rpc_create_trade.proto";
import "rpc_get_trade.proto";
import "rpc_delete_trade.proto";
import "rpc_create_transaction.proto";
import "rpc_get_transaction.proto";
import "rpc_update_transaction.proto";
import "rpc_delete_transaction.proto";
import "rpc_get_transaction_by_user_email.proto";
import "rpc_update_order_status_and_filled_amount.proto";
import "rpc_list_order.proto";
import "rpc_google_login.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/huzaifa678/Crypto-currency-web-app-project/pb";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
    info: {
        title: "Crypto web app API";
        version: "1.0";
        contact: {
            name: "Huzaifa Ahmad Gill";
            url: "https://github.com/huzaifa678";
            email: "huzaifagill411@gmail.com";
        };
    };
};

service CryptoWebApp {
    rpc CreateUser (CreateUserRequest) returns (CreateUserResponse) {
        option (google.api.http) = {
            post: "/v1/create_user"
            body: "*"
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Create a new user with the specified details";
            summary: "Create user";
        };
    }
    rpc DeleteUser (DeleteUserRequest) returns (DeleteUserResponse) {
        option (google.api.http) = {
            delete: "/v1/users/{user_id}"
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Delete user by user ID";
            summary: "Delete user";
        };
    }

    rpc UpdateUser (UpdateUserRequest) returns (UpdateUserResponse) {
        option (google.api.http) = {
            patch: "/v1/users/{user_id}"
            body: "*"
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Update user details by user ID";
            summary: "Update user";
        };
    }

    rpc GetUser (GetUserRequest) returns (GetUserResponse) {
        option (google.api.http) = {
            get: "/v1/users/{user_id}"
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Get user details by user ID";
            summary: "Get user";
        };
    }

    rpc LoginUser (LoginUserRequest) returns (LoginUserResponse) {
        option (google.api.http) = {
            post: "/v1/login"
            body: "*"
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Login with your user credentials and get access token and refresh token";
            summary: "Login user";
        };
    }

    rpc CreateMarket (CreateMarketRequest) returns (CreateMarketResponse) {
        option (google.api.http) = {
            post: "/v1/markets"
            body: "*"
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Create a new market with the specified details";
            summary: "Create market";
        };
    }

    rpc DeleteMarket (DeleteMarketRequest) returns (DeleteMarketResponse) {
        option (google.api.http) = {
            delete: "/v1/markets/{market_id}"
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Delete market by market ID";
            summary: "Delete market";
        };
    }

    rpc GetMarket (GetMarketRequest) returns (GetMarketResponse) {
        option (google.api.http) = {
            get: "/v1/markets/{market_id}"
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Get market details by market ID";
            summary: "Get market";
        };
    }

    rpc ListMarkets (google.protobuf.Empty) returns (MarketListResponse) {
        option (google.api.http) = {
            get: "/v1/markets"
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "List all markets";
            summary: "List markets";
        };
    }

    rpc CreateOrder (CreateOrderRequest) returns (CreateOrderResponse) {
        option (google.api.http) = {
            post: "/v1/orders"
            body: "*"
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Create a new order with the specified details";
            summary: "Create order";
        };
    }

    rpc DeleteOrder (DeleteOrderRequest) returns (DeleteOrderResponse) {
        option (google.api.http) = {
            delete: "/v1/orders/{order_id}"
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Delete order by order ID";
            summary: "Delete order";
        };
    }

    rpc GetOrder (GetOrderRequest) returns (GetOrderResponse) {
        option (google.api.http) = {
            get: "/v1/orders/{order_id}"
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Get order details by order ID";
            summary: "Get order";
        };
    }

    rpc UpdateOrder (UpdateOrderStatusAndFilledAmountRequest) returns (UpdateOrderStatusAndFilledAmountResponse) {
        option (google.api.http) = {
            patch: "/v1/orders/{order_id}"
            body: "*"
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Update order details by order ID";
            summary: "Update order";
        };
    }

    rpc ListOrder (google.protobuf.Empty) returns (OrderListResponse) {
        option (google.api.http) = {
            get: "/v1/orders"
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "List all orders";
            summary: "List orders";
        };
    }

    rpc CreateWallet (CreateWalletRequest) returns (CreateWalletResponse) {
        option (google.api.http) = {
            post: "/v1/wallets"
            body: "*"
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Create a new wallet for a user with the specified currency";
            summary: "Create wallet";
        };
    }

    rpc DeleteWallet (DeleteWalletRequest) returns (DeleteWalletResponse) {
        option (google.api.http) = {
            delete: "/v1/wallets/{wallet_id}"
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Delete wallet by wallet ID";
            summary: "Delete wallet";
        };
    }

    rpc UpdateWallet (UpdateWalletRequest) returns (UpdateWalletResponse) {
        option (google.api.http) = {
            patch: "/v1/wallets/{wallet_id}"
            body: "*"
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Update wallet details by wallet ID";
            summary: "Update wallet";
        };
    }

    rpc GetWallet (GetWalletRequest) returns (GetWalletResponse) {
        option (google.api.http) = {
            get: "/v1/wallets/{wallet_id}"
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Get wallet details by wallet ID";
            summary: "Get wallet";
        };
    }

    rpc VerifyEmail (VerifyEmailRequest) returns (VerifyEmailResponse) {
        option (google.api.http) = {
            get: "/v1/verify_email"
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Verify user email with the provided secret code";
            summary: "Verify email";
        };
    }

    rpc StreamTrades(TradeStreamRequest) returns (stream Trade) {

        option (google.api.http) = {
            get: "/v1/stream_trades"
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Stream binance live data to the client";
            summary: "Server stream"
        };
    }

    rpc CreateTrade(CreateTradeRequest) returns (CreateTradeResponse) {

        option (google.api.http) = {
            post: "/v1/trades"
            body: "*"
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Create a new trade for the user";
            summary: "Create Trade"
        };
    }

    rpc GetTrade(GetTradeByIDRequest) returns (GetTradeByIDResponse) {

        option (google.api.http) = {
            get: "/v1/trades/{trade_id}"
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Get the trade details by the trade id"
            summary: "Get Trade"
        };
    }
    
    rpc DeleteTrade(DeleteTradeRequest) returns (DeleteTradeResponse) {

        option (google.api.http) = {
            delete: "/v1/trades/{trade_id}"
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Delete trade by the trade id"
            summary: "Delete trade"
        };
    }

    rpc CreateTransaction(CreateTransactionRequest) returns (CreateTransactionResponse) {
        
        option (google.api.http) = {
            post: "/v1/transactions"
            body: "*"
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Create the transaction for the user"
            summary: "Create Transaction"
        };
    }


    rpc GetTransaction(GetTransactionByIDRequest) returns (GetTransactionByIDResponse) {
        
        option (google.api.http) = {
            get: "/v1/transactions/{transaction_id}"
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Get the transaction for the user"
            summary: "Get Transaction"
        };
    }

    rpc GetTransactionsByUserEmail(GetTransactionsByUserEmailRequest) returns (GetTransactionsByUserEmailResponse) {
    
        option (google.api.http) = {
            get: "/v1/transactions/list/{user_email}"
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Get all the transactions done by user using their email"
            summary: "Get Transaction By User Email"
        };
    }

    rpc UpdateTransactionStatus(UpdateTransactionStatusRequest) returns (UpdateTransactionStatusResponse) {

        option (google.api.http) = {
            patch: "/v1/transactions/{transaction_id}"
            body: "*"
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Update the transaction status for the user"
            summary: "Update Transaction Status"
        };
    }
    
    rpc DeleteTransaction(DeleteTransactionRequest) returns (DeleteTransactionResponse) {

        option (google.api.http) = {
            delete: "/v1/transactions/{transaction_id}"
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Delete the transaction for the user"
            summary: "Delete Transaction"
        };
    }

    rpc GoogleLogin (GoogleLoginRequest) returns (GoogleLoginResponse) {
        option (google.api.http) = {
            post: "/v1/google_login"
            body: "*"
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Login or register using Google OAuth and get access token and refresh token";
            summary: "Google Login";
        };
    }
}